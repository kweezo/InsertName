Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 0x7ffd6529ede0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = NULL
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 0x7ffd652a22f0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "Client"
            applicationVersion:             uint32_t = 4194304
            pEngineName:                    const char* = "Niko je weeb"
            engineVersion:                  uint32_t = 4194304
            apiVersion:                     uint32_t = 4206592
        enabledLayerCount:              uint32_t = 2
        ppEnabledLayerNames:            const char* const* = 0x5cacd92d36b0
            ppEnabledLayerNames[0]:         const char* const = "VK_LAYER_KHRONOS_validation"
            ppEnabledLayerNames[1]:         const char* const = "VK_LAYER_LUNARG_api_dump"
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 0x5cacd9476000
            ppEnabledExtensionNames[0]:     const char* const = "VK_EXT_debug_utils"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[2]:     const char* const = "VK_KHR_xcb_surface"
        pNext:                          const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 0x5cacd945c5a0

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x5cacd945c5a0
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x5cacd945c5a0
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 0x5cacd96f27f0
        pPhysicalDevices[0]:            VkPhysicalDevice = 0x5cacd96f2530
        pPhysicalDevices[1]:            VkPhysicalDevice = 0x5cacd96f2550

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pQueueFamilyPropertyCount:      uint32_t* = 5
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pQueueFamilyPropertyCount:      uint32_t* = 5
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0x5cacd9495410
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0x5cacd9495410:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd949541c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 0x5cacd9495428:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd9495434:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 0x5cacd9495440:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd949544c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 0x5cacd9495458:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0x5cacd9495464:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 0x5cacd9495470:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd949547c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2550
    pQueueFamilyPropertyCount:      uint32_t* = 1
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2550
    pQueueFamilyPropertyCount:      uint32_t* = 1
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0x5cacd96f2830
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0x5cacd96f2830:
            queueFlags:                     VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd96f283c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x5cacd945c5a0
    pCreateInfo:                    const VkDebugUtilsMessengerCreateInfoEXT* = 0x7ffd652a2280:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
        pNext:                          const void* = NULL
        flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0
        messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
        messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
        pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 1
        pUserData:                      void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMessenger:                     VkDebugUtilsMessengerEXT* = 0x5cacd96f27f0

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x5cacd945c5a0
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x5cacd945c5a0
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 0x5cacd96f3620
        pPhysicalDevices[0]:            VkPhysicalDevice = 0x5cacd96f2530
        pPhysicalDevices[1]:            VkPhysicalDevice = 0x5cacd96f2550

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties* = 0x5cacd96fa010:
        apiVersion:                     uint32_t = 4206834
        driverVersion:                  uint32_t = 2246754560
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 8710
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x5cacd96fa124
            pipelineCacheUUID[0]:           uint8_t = 187
            pipelineCacheUUID[1]:           uint8_t = 3
            pipelineCacheUUID[2]:           uint8_t = 117
            pipelineCacheUUID[3]:           uint8_t = 135
            pipelineCacheUUID[4]:           uint8_t = 10
            pipelineCacheUUID[5]:           uint8_t = 1
            pipelineCacheUUID[6]:           uint8_t = 217
            pipelineCacheUUID[7]:           uint8_t = 83
            pipelineCacheUUID[8]:           uint8_t = 116
            pipelineCacheUUID[9]:           uint8_t = 106
            pipelineCacheUUID[10]:          uint8_t = 194
            pipelineCacheUUID[11]:          uint8_t = 145
            pipelineCacheUUID[12]:          uint8_t = 194
            pipelineCacheUUID[13]:          uint8_t = 114
            pipelineCacheUUID[14]:          uint8_t = 70
            pipelineCacheUUID[15]:          uint8_t = 106
        limits:                         VkPhysicalDeviceLimits = 0x5cacd96fa138:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0x5cacd96fa214
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x5cacd96fa224
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x5cacd96fa250
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0x5cacd96fa258
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x5cacd96fa2f4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0x5cacd96fa2fc
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x5cacd96fa330:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2550
    pProperties:                    VkPhysicalDeviceProperties* = 0x5cacd96fa350:
        apiVersion:                     uint32_t = 4206866
        driverVersion:                  uint32_t = 1
        vendorID:                       uint32_t = 65541
        deviceID:                       uint32_t = 0
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_CPU (4)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "llvmpipe (LLVM 17.0.6, 256 bits)"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x5cacd96fa464
            pipelineCacheUUID[0]:           uint8_t = 50
            pipelineCacheUUID[1]:           uint8_t = 52
            pipelineCacheUUID[2]:           uint8_t = 46
            pipelineCacheUUID[3]:           uint8_t = 48
            pipelineCacheUUID[4]:           uint8_t = 46
            pipelineCacheUUID[5]:           uint8_t = 57
            pipelineCacheUUID[6]:           uint8_t = 45
            pipelineCacheUUID[7]:           uint8_t = 48
            pipelineCacheUUID[8]:           uint8_t = 117
            pipelineCacheUUID[9]:           uint8_t = 98
            pipelineCacheUUID[10]:          uint8_t = 117
            pipelineCacheUUID[11]:          uint8_t = 110
            pipelineCacheUUID[12]:          uint8_t = 116
            pipelineCacheUUID[13]:          uint8_t = 117
            pipelineCacheUUID[14]:          uint8_t = 48
            pipelineCacheUUID[15]:          uint8_t = 46
        limits:                         VkPhysicalDeviceLimits = 0x5cacd96fa478:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 4096
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 134217728
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 32768
            bufferImageGranularity:         VkDeviceSize = 64
            sparseAddressSpaceSize:         VkDeviceSize = 0
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1000000
            maxPerStageDescriptorUniformBuffers: uint32_t = 1000000
            maxPerStageDescriptorStorageBuffers: uint32_t = 1000000
            maxPerStageDescriptorSampledImages: uint32_t = 1000000
            maxPerStageDescriptorStorageImages: uint32_t = 1000000
            maxPerStageDescriptorInputAttachments: uint32_t = 1000000
            maxPerStageResources:           uint32_t = 1000000
            maxDescriptorSetSamplers:       uint32_t = 1000000
            maxDescriptorSetUniformBuffers: uint32_t = 1000000
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 1000000
            maxDescriptorSetStorageBuffers: uint32_t = 1000000
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 1000000
            maxDescriptorSetSampledImages:  uint32_t = 1000000
            maxDescriptorSetStorageImages:  uint32_t = 1000000
            maxDescriptorSetInputAttachments: uint32_t = 1000000
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 128
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 64
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 2
            maxFragmentCombinedOutputResources: uint32_t = 104
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 0x5cacd96fa554
                maxComputeWorkGroupCount[0]:    uint32_t = 65535
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x5cacd96fa564
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 1024
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 4
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x5cacd96fa590
                maxViewportDimensions[0]:       uint32_t = 16384
                maxViewportDimensions[1]:       uint32_t = 16384
            viewportBoundsRange:            float[2] = 0x5cacd96fa598
                viewportBoundsRange[0]:         float = -32768
                viewportBoundsRange[1]:         float = 32768
            viewportSubPixelBits:           uint32_t = 0
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 16
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -32
            maxTexelOffset:                 uint32_t = 31
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -2
            maxInterpolationOffset:         float = 2
            subPixelInterpolationOffsetBits: uint32_t = 8
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x5cacd96fa634
                pointSizeRange[0]:              float = 0
                pointSizeRange[1]:              float = 255
            lineWidthRange:                 float[2] = 0x5cacd96fa63c
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 255
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 128
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 128
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x5cacd96fa670:
            residencyStandard2DBlockShape:  VkBool32 = 0
            residencyStandard2DMultisampleBlockShape: VkBool32 = 0
            residencyStandard3DBlockShape:  VkBool32 = 0
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties* = 0x7ffd652a1b00:
        apiVersion:                     uint32_t = 4206834
        driverVersion:                  uint32_t = 2246754560
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 8710
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
            pipelineCacheUUID[0]:           uint8_t = 187
            pipelineCacheUUID[1]:           uint8_t = 3
            pipelineCacheUUID[2]:           uint8_t = 117
            pipelineCacheUUID[3]:           uint8_t = 135
            pipelineCacheUUID[4]:           uint8_t = 10
            pipelineCacheUUID[5]:           uint8_t = 1
            pipelineCacheUUID[6]:           uint8_t = 217
            pipelineCacheUUID[7]:           uint8_t = 83
            pipelineCacheUUID[8]:           uint8_t = 116
            pipelineCacheUUID[9]:           uint8_t = 106
            pipelineCacheUUID[10]:          uint8_t = 194
            pipelineCacheUUID[11]:          uint8_t = 145
            pipelineCacheUUID[12]:          uint8_t = 194
            pipelineCacheUUID[13]:          uint8_t = 114
            pipelineCacheUUID[14]:          uint8_t = 70
            pipelineCacheUUID[15]:          uint8_t = 106
        limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x7ffd652a1de4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0x7ffd652a1dec
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1af0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDevicePCIBusInfoPropertiesEXT
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1b00:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1de4
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a1dec
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDevicePCIBusInfoPropertiesEXT = 0x7ffd652a1ad0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT (1000212000)
            pNext:                          void* = NULL
            pciDomain:                      uint32_t = 0
            pciBus:                         uint32_t = 1
            pciDevice:                      uint32_t = 0
            pciFunction:                    uint32_t = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2550
    pProperties:                    VkPhysicalDeviceProperties* = 0x7ffd652a1b00:
        apiVersion:                     uint32_t = 4206866
        driverVersion:                  uint32_t = 1
        vendorID:                       uint32_t = 65541
        deviceID:                       uint32_t = 0
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_CPU (4)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "llvmpipe (LLVM 17.0.6, 256 bits)"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
            pipelineCacheUUID[0]:           uint8_t = 50
            pipelineCacheUUID[1]:           uint8_t = 52
            pipelineCacheUUID[2]:           uint8_t = 46
            pipelineCacheUUID[3]:           uint8_t = 48
            pipelineCacheUUID[4]:           uint8_t = 46
            pipelineCacheUUID[5]:           uint8_t = 57
            pipelineCacheUUID[6]:           uint8_t = 45
            pipelineCacheUUID[7]:           uint8_t = 48
            pipelineCacheUUID[8]:           uint8_t = 117
            pipelineCacheUUID[9]:           uint8_t = 98
            pipelineCacheUUID[10]:          uint8_t = 117
            pipelineCacheUUID[11]:          uint8_t = 110
            pipelineCacheUUID[12]:          uint8_t = 116
            pipelineCacheUUID[13]:          uint8_t = 117
            pipelineCacheUUID[14]:          uint8_t = 48
            pipelineCacheUUID[15]:          uint8_t = 46
        limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 4096
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 134217728
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 32768
            bufferImageGranularity:         VkDeviceSize = 64
            sparseAddressSpaceSize:         VkDeviceSize = 0
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1000000
            maxPerStageDescriptorUniformBuffers: uint32_t = 1000000
            maxPerStageDescriptorStorageBuffers: uint32_t = 1000000
            maxPerStageDescriptorSampledImages: uint32_t = 1000000
            maxPerStageDescriptorStorageImages: uint32_t = 1000000
            maxPerStageDescriptorInputAttachments: uint32_t = 1000000
            maxPerStageResources:           uint32_t = 1000000
            maxDescriptorSetSamplers:       uint32_t = 1000000
            maxDescriptorSetUniformBuffers: uint32_t = 1000000
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 1000000
            maxDescriptorSetStorageBuffers: uint32_t = 1000000
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 1000000
            maxDescriptorSetSampledImages:  uint32_t = 1000000
            maxDescriptorSetStorageImages:  uint32_t = 1000000
            maxDescriptorSetInputAttachments: uint32_t = 1000000
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 128
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 64
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 2
            maxFragmentCombinedOutputResources: uint32_t = 104
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                maxComputeWorkGroupCount[0]:    uint32_t = 65535
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 1024
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 4
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                maxViewportDimensions[0]:       uint32_t = 16384
                maxViewportDimensions[1]:       uint32_t = 16384
            viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                viewportBoundsRange[0]:         float = -32768
                viewportBoundsRange[1]:         float = 32768
            viewportSubPixelBits:           uint32_t = 0
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 16
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -32
            maxTexelOffset:                 uint32_t = 31
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -2
            maxInterpolationOffset:         float = 2
            subPixelInterpolationOffsetBits: uint32_t = 8
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x7ffd652a1de4
                pointSizeRange[0]:              float = 0
                pointSizeRange[1]:              float = 255
            lineWidthRange:                 float[2] = 0x7ffd652a1dec
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 255
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 128
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 128
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
            residencyStandard2DBlockShape:  VkBool32 = 0
            residencyStandard2DMultisampleBlockShape: VkBool32 = 0
            residencyStandard3DBlockShape:  VkBool32 = 0
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2550
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1af0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDevicePCIBusInfoPropertiesEXT
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1b00:
            apiVersion:                     uint32_t = 4206866
            driverVersion:                  uint32_t = 1
            vendorID:                       uint32_t = 65541
            deviceID:                       uint32_t = 0
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_CPU (4)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "llvmpipe (LLVM 17.0.6, 256 bits)"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
                pipelineCacheUUID[0]:           uint8_t = 50
                pipelineCacheUUID[1]:           uint8_t = 52
                pipelineCacheUUID[2]:           uint8_t = 46
                pipelineCacheUUID[3]:           uint8_t = 48
                pipelineCacheUUID[4]:           uint8_t = 46
                pipelineCacheUUID[5]:           uint8_t = 57
                pipelineCacheUUID[6]:           uint8_t = 45
                pipelineCacheUUID[7]:           uint8_t = 48
                pipelineCacheUUID[8]:           uint8_t = 117
                pipelineCacheUUID[9]:           uint8_t = 98
                pipelineCacheUUID[10]:          uint8_t = 117
                pipelineCacheUUID[11]:          uint8_t = 110
                pipelineCacheUUID[12]:          uint8_t = 116
                pipelineCacheUUID[13]:          uint8_t = 117
                pipelineCacheUUID[14]:          uint8_t = 48
                pipelineCacheUUID[15]:          uint8_t = 46
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
                maxImageDimension1D:            uint32_t = 16384
                maxImageDimension2D:            uint32_t = 16384
                maxImageDimension3D:            uint32_t = 4096
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 134217728
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 32768
                bufferImageGranularity:         VkDeviceSize = 64
                sparseAddressSpaceSize:         VkDeviceSize = 0
                maxBoundDescriptorSets:         uint32_t = 8
                maxPerStageDescriptorSamplers:  uint32_t = 1000000
                maxPerStageDescriptorUniformBuffers: uint32_t = 1000000
                maxPerStageDescriptorStorageBuffers: uint32_t = 1000000
                maxPerStageDescriptorSampledImages: uint32_t = 1000000
                maxPerStageDescriptorStorageImages: uint32_t = 1000000
                maxPerStageDescriptorInputAttachments: uint32_t = 1000000
                maxPerStageResources:           uint32_t = 1000000
                maxDescriptorSetSamplers:       uint32_t = 1000000
                maxDescriptorSetUniformBuffers: uint32_t = 1000000
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 1000000
                maxDescriptorSetStorageBuffers: uint32_t = 1000000
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 1000000
                maxDescriptorSetSampledImages:  uint32_t = 1000000
                maxDescriptorSetStorageImages:  uint32_t = 1000000
                maxDescriptorSetInputAttachments: uint32_t = 1000000
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 128
                maxTessellationControlTotalOutputComponents: uint32_t = 4096
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 64
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 2
                maxFragmentCombinedOutputResources: uint32_t = 104
                maxComputeSharedMemorySize:     uint32_t = 32768
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                    maxComputeWorkGroupCount[0]:    uint32_t = 65535
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 1024
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 4
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 16
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                    maxViewportDimensions[0]:       uint32_t = 16384
                    maxViewportDimensions[1]:       uint32_t = 16384
                viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                    viewportBoundsRange[0]:         float = -32768
                    viewportBoundsRange[1]:         float = 32768
                viewportSubPixelBits:           uint32_t = 0
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 16
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -32
                maxTexelOffset:                 uint32_t = 31
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -2
                maxInterpolationOffset:         float = 2
                subPixelInterpolationOffsetBits: uint32_t = 8
                maxFramebufferWidth:            uint32_t = 16384
                maxFramebufferHeight:           uint32_t = 16384
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1de4
                    pointSizeRange[0]:              float = 0
                    pointSizeRange[1]:              float = 255
                lineWidthRange:                 float[2] = 0x7ffd652a1dec
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 255
                pointSizeGranularity:           float = 0.125
                lineWidthGranularity:           float = 0.0078125
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 128
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 128
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
                residencyStandard2DBlockShape:  VkBool32 = 0
                residencyStandard2DMultisampleBlockShape: VkBool32 = 0
                residencyStandard3DBlockShape:  VkBool32 = 0
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 0
        pNext:                          VkPhysicalDevicePCIBusInfoPropertiesEXT = 0x7ffd652a1ad0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT (1000212000)
            pNext:                          void* = NULL
            pciDomain:                      uint32_t = 0
            pciBus:                         uint32_t = 0
            pciDevice:                      uint32_t = 0
            pciFunction:                    uint32_t = 0

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x5cacd945c5a0
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x5cacd945c5a0
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 0x5cacd96fb370
        pPhysicalDevices[0]:            VkPhysicalDevice = 0x5cacd96f2530
        pPhysicalDevices[1]:            VkPhysicalDevice = 0x5cacd96f2550

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties* = 0x7ffd652a1b00:
        apiVersion:                     uint32_t = 4206834
        driverVersion:                  uint32_t = 2246754560
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 8710
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
            pipelineCacheUUID[0]:           uint8_t = 187
            pipelineCacheUUID[1]:           uint8_t = 3
            pipelineCacheUUID[2]:           uint8_t = 117
            pipelineCacheUUID[3]:           uint8_t = 135
            pipelineCacheUUID[4]:           uint8_t = 10
            pipelineCacheUUID[5]:           uint8_t = 1
            pipelineCacheUUID[6]:           uint8_t = 217
            pipelineCacheUUID[7]:           uint8_t = 83
            pipelineCacheUUID[8]:           uint8_t = 116
            pipelineCacheUUID[9]:           uint8_t = 106
            pipelineCacheUUID[10]:          uint8_t = 194
            pipelineCacheUUID[11]:          uint8_t = 145
            pipelineCacheUUID[12]:          uint8_t = 194
            pipelineCacheUUID[13]:          uint8_t = 114
            pipelineCacheUUID[14]:          uint8_t = 70
            pipelineCacheUUID[15]:          uint8_t = 106
        limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x7ffd652a1de4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0x7ffd652a1dec
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1af0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDevicePCIBusInfoPropertiesEXT
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1b00:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1de4
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a1dec
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDevicePCIBusInfoPropertiesEXT = 0x7ffd652a1ad0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT (1000212000)
            pNext:                          void* = NULL
            pciDomain:                      uint32_t = 0
            pciBus:                         uint32_t = 1
            pciDevice:                      uint32_t = 0
            pciFunction:                    uint32_t = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2550
    pProperties:                    VkPhysicalDeviceProperties* = 0x7ffd652a1b00:
        apiVersion:                     uint32_t = 4206866
        driverVersion:                  uint32_t = 1
        vendorID:                       uint32_t = 65541
        deviceID:                       uint32_t = 0
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_CPU (4)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "llvmpipe (LLVM 17.0.6, 256 bits)"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
            pipelineCacheUUID[0]:           uint8_t = 50
            pipelineCacheUUID[1]:           uint8_t = 52
            pipelineCacheUUID[2]:           uint8_t = 46
            pipelineCacheUUID[3]:           uint8_t = 48
            pipelineCacheUUID[4]:           uint8_t = 46
            pipelineCacheUUID[5]:           uint8_t = 57
            pipelineCacheUUID[6]:           uint8_t = 45
            pipelineCacheUUID[7]:           uint8_t = 48
            pipelineCacheUUID[8]:           uint8_t = 117
            pipelineCacheUUID[9]:           uint8_t = 98
            pipelineCacheUUID[10]:          uint8_t = 117
            pipelineCacheUUID[11]:          uint8_t = 110
            pipelineCacheUUID[12]:          uint8_t = 116
            pipelineCacheUUID[13]:          uint8_t = 117
            pipelineCacheUUID[14]:          uint8_t = 48
            pipelineCacheUUID[15]:          uint8_t = 46
        limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 4096
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 134217728
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 32768
            bufferImageGranularity:         VkDeviceSize = 64
            sparseAddressSpaceSize:         VkDeviceSize = 0
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1000000
            maxPerStageDescriptorUniformBuffers: uint32_t = 1000000
            maxPerStageDescriptorStorageBuffers: uint32_t = 1000000
            maxPerStageDescriptorSampledImages: uint32_t = 1000000
            maxPerStageDescriptorStorageImages: uint32_t = 1000000
            maxPerStageDescriptorInputAttachments: uint32_t = 1000000
            maxPerStageResources:           uint32_t = 1000000
            maxDescriptorSetSamplers:       uint32_t = 1000000
            maxDescriptorSetUniformBuffers: uint32_t = 1000000
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 1000000
            maxDescriptorSetStorageBuffers: uint32_t = 1000000
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 1000000
            maxDescriptorSetSampledImages:  uint32_t = 1000000
            maxDescriptorSetStorageImages:  uint32_t = 1000000
            maxDescriptorSetInputAttachments: uint32_t = 1000000
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 128
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 64
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 2
            maxFragmentCombinedOutputResources: uint32_t = 104
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                maxComputeWorkGroupCount[0]:    uint32_t = 65535
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 1024
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 4
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                maxViewportDimensions[0]:       uint32_t = 16384
                maxViewportDimensions[1]:       uint32_t = 16384
            viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                viewportBoundsRange[0]:         float = -32768
                viewportBoundsRange[1]:         float = 32768
            viewportSubPixelBits:           uint32_t = 0
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 16
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -32
            maxTexelOffset:                 uint32_t = 31
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -2
            maxInterpolationOffset:         float = 2
            subPixelInterpolationOffsetBits: uint32_t = 8
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x7ffd652a1de4
                pointSizeRange[0]:              float = 0
                pointSizeRange[1]:              float = 255
            lineWidthRange:                 float[2] = 0x7ffd652a1dec
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 255
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 128
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 128
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
            residencyStandard2DBlockShape:  VkBool32 = 0
            residencyStandard2DMultisampleBlockShape: VkBool32 = 0
            residencyStandard3DBlockShape:  VkBool32 = 0
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2550
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1af0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDevicePCIBusInfoPropertiesEXT
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1b00:
            apiVersion:                     uint32_t = 4206866
            driverVersion:                  uint32_t = 1
            vendorID:                       uint32_t = 65541
            deviceID:                       uint32_t = 0
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_CPU (4)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "llvmpipe (LLVM 17.0.6, 256 bits)"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
                pipelineCacheUUID[0]:           uint8_t = 50
                pipelineCacheUUID[1]:           uint8_t = 52
                pipelineCacheUUID[2]:           uint8_t = 46
                pipelineCacheUUID[3]:           uint8_t = 48
                pipelineCacheUUID[4]:           uint8_t = 46
                pipelineCacheUUID[5]:           uint8_t = 57
                pipelineCacheUUID[6]:           uint8_t = 45
                pipelineCacheUUID[7]:           uint8_t = 48
                pipelineCacheUUID[8]:           uint8_t = 117
                pipelineCacheUUID[9]:           uint8_t = 98
                pipelineCacheUUID[10]:          uint8_t = 117
                pipelineCacheUUID[11]:          uint8_t = 110
                pipelineCacheUUID[12]:          uint8_t = 116
                pipelineCacheUUID[13]:          uint8_t = 117
                pipelineCacheUUID[14]:          uint8_t = 48
                pipelineCacheUUID[15]:          uint8_t = 46
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
                maxImageDimension1D:            uint32_t = 16384
                maxImageDimension2D:            uint32_t = 16384
                maxImageDimension3D:            uint32_t = 4096
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 134217728
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 32768
                bufferImageGranularity:         VkDeviceSize = 64
                sparseAddressSpaceSize:         VkDeviceSize = 0
                maxBoundDescriptorSets:         uint32_t = 8
                maxPerStageDescriptorSamplers:  uint32_t = 1000000
                maxPerStageDescriptorUniformBuffers: uint32_t = 1000000
                maxPerStageDescriptorStorageBuffers: uint32_t = 1000000
                maxPerStageDescriptorSampledImages: uint32_t = 1000000
                maxPerStageDescriptorStorageImages: uint32_t = 1000000
                maxPerStageDescriptorInputAttachments: uint32_t = 1000000
                maxPerStageResources:           uint32_t = 1000000
                maxDescriptorSetSamplers:       uint32_t = 1000000
                maxDescriptorSetUniformBuffers: uint32_t = 1000000
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 1000000
                maxDescriptorSetStorageBuffers: uint32_t = 1000000
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 1000000
                maxDescriptorSetSampledImages:  uint32_t = 1000000
                maxDescriptorSetStorageImages:  uint32_t = 1000000
                maxDescriptorSetInputAttachments: uint32_t = 1000000
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 128
                maxTessellationControlTotalOutputComponents: uint32_t = 4096
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 64
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 2
                maxFragmentCombinedOutputResources: uint32_t = 104
                maxComputeSharedMemorySize:     uint32_t = 32768
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                    maxComputeWorkGroupCount[0]:    uint32_t = 65535
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 1024
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 4
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 16
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                    maxViewportDimensions[0]:       uint32_t = 16384
                    maxViewportDimensions[1]:       uint32_t = 16384
                viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                    viewportBoundsRange[0]:         float = -32768
                    viewportBoundsRange[1]:         float = 32768
                viewportSubPixelBits:           uint32_t = 0
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 16
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -32
                maxTexelOffset:                 uint32_t = 31
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -2
                maxInterpolationOffset:         float = 2
                subPixelInterpolationOffsetBits: uint32_t = 8
                maxFramebufferWidth:            uint32_t = 16384
                maxFramebufferHeight:           uint32_t = 16384
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 5 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1de4
                    pointSizeRange[0]:              float = 0
                    pointSizeRange[1]:              float = 255
                lineWidthRange:                 float[2] = 0x7ffd652a1dec
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 255
                pointSizeGranularity:           float = 0.125
                lineWidthGranularity:           float = 0.0078125
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 128
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 128
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
                residencyStandard2DBlockShape:  VkBool32 = 0
                residencyStandard2DMultisampleBlockShape: VkBool32 = 0
                residencyStandard3DBlockShape:  VkBool32 = 0
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 0
        pNext:                          VkPhysicalDevicePCIBusInfoPropertiesEXT = 0x7ffd652a1ad0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT (1000212000)
            pNext:                          void* = NULL
            pciDomain:                      uint32_t = 0
            pciBus:                         uint32_t = 0
            pciDevice:                      uint32_t = 0
            pciFunction:                    uint32_t = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties* = 0x7ffd652a2020:
        apiVersion:                     uint32_t = 4206834
        driverVersion:                  uint32_t = 2246754560
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 8710
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a2134
            pipelineCacheUUID[0]:           uint8_t = 187
            pipelineCacheUUID[1]:           uint8_t = 3
            pipelineCacheUUID[2]:           uint8_t = 117
            pipelineCacheUUID[3]:           uint8_t = 135
            pipelineCacheUUID[4]:           uint8_t = 10
            pipelineCacheUUID[5]:           uint8_t = 1
            pipelineCacheUUID[6]:           uint8_t = 217
            pipelineCacheUUID[7]:           uint8_t = 83
            pipelineCacheUUID[8]:           uint8_t = 116
            pipelineCacheUUID[9]:           uint8_t = 106
            pipelineCacheUUID[10]:          uint8_t = 194
            pipelineCacheUUID[11]:          uint8_t = 145
            pipelineCacheUUID[12]:          uint8_t = 194
            pipelineCacheUUID[13]:          uint8_t = 114
            pipelineCacheUUID[14]:          uint8_t = 70
            pipelineCacheUUID[15]:          uint8_t = 106
        limits:                         VkPhysicalDeviceLimits = 0x7ffd652a2148:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a2224
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a2234
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x7ffd652a2260
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0x7ffd652a2268
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x7ffd652a2304
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0x7ffd652a230c
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a2340:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties* = 0x7d79d6ffea40:
        apiVersion:                     uint32_t = 4206834
        driverVersion:                  uint32_t = 2246754560
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 8710
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7d79d6ffeb54
            pipelineCacheUUID[0]:           uint8_t = 187
            pipelineCacheUUID[1]:           uint8_t = 3
            pipelineCacheUUID[2]:           uint8_t = 117
            pipelineCacheUUID[3]:           uint8_t = 135
            pipelineCacheUUID[4]:           uint8_t = 10
            pipelineCacheUUID[5]:           uint8_t = 1
            pipelineCacheUUID[6]:           uint8_t = 217
            pipelineCacheUUID[7]:           uint8_t = 83
            pipelineCacheUUID[8]:           uint8_t = 116
            pipelineCacheUUID[9]:           uint8_t = 106
            pipelineCacheUUID[10]:          uint8_t = 194
            pipelineCacheUUID[11]:          uint8_t = 145
            pipelineCacheUUID[12]:          uint8_t = 194
            pipelineCacheUUID[13]:          uint8_t = 114
            pipelineCacheUUID[14]:          uint8_t = 70
            pipelineCacheUUID[15]:          uint8_t = 106
        limits:                         VkPhysicalDeviceLimits = 0x7d79d6ffeb68:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0x7d79d6ffec44
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x7d79d6ffec54
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x7d79d6ffec80
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0x7d79d6ffec88
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x7d79d6ffed24
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0x7d79d6ffed2c
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7d79d6ffed60:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Using device: NVIDIA GeForce RTX 3080
Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pQueueFamilyPropertyCount:      uint32_t* = 5
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pQueueFamilyPropertyCount:      uint32_t* = 5
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0x5cacd948a030
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0x5cacd948a030:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd948a03c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 0x5cacd948a048:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd948a054:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 0x5cacd948a060:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd948a06c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 0x5cacd948a078:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0x5cacd948a084:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 0x5cacd948a090:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacd948a09c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pFeatures:                      VkPhysicalDeviceFeatures* = 0x7ffd652a20a0:
        robustBufferAccess:             VkBool32 = 1
        fullDrawIndexUint32:            VkBool32 = 1
        imageCubeArray:                 VkBool32 = 1
        independentBlend:               VkBool32 = 1
        geometryShader:                 VkBool32 = 1
        tessellationShader:             VkBool32 = 1
        sampleRateShading:              VkBool32 = 1
        dualSrcBlend:                   VkBool32 = 1
        logicOp:                        VkBool32 = 1
        multiDrawIndirect:              VkBool32 = 1
        drawIndirectFirstInstance:      VkBool32 = 1
        depthClamp:                     VkBool32 = 1
        depthBiasClamp:                 VkBool32 = 1
        fillModeNonSolid:               VkBool32 = 1
        depthBounds:                    VkBool32 = 1
        wideLines:                      VkBool32 = 1
        largePoints:                    VkBool32 = 1
        alphaToOne:                     VkBool32 = 1
        multiViewport:                  VkBool32 = 1
        samplerAnisotropy:              VkBool32 = 1
        textureCompressionETC2:         VkBool32 = 0
        textureCompressionASTC_LDR:     VkBool32 = 0
        textureCompressionBC:           VkBool32 = 1
        occlusionQueryPrecise:          VkBool32 = 1
        pipelineStatisticsQuery:        VkBool32 = 1
        vertexPipelineStoresAndAtomics: VkBool32 = 1
        fragmentStoresAndAtomics:       VkBool32 = 1
        shaderTessellationAndGeometryPointSize: VkBool32 = 1
        shaderImageGatherExtended:      VkBool32 = 1
        shaderStorageImageExtendedFormats: VkBool32 = 1
        shaderStorageImageMultisample:  VkBool32 = 1
        shaderStorageImageReadWithoutFormat: VkBool32 = 1
        shaderStorageImageWriteWithoutFormat: VkBool32 = 1
        shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
        shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
        shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
        shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
        shaderClipDistance:             VkBool32 = 1
        shaderCullDistance:             VkBool32 = 1
        shaderFloat64:                  VkBool32 = 1
        shaderInt64:                    VkBool32 = 1
        shaderInt16:                    VkBool32 = 1
        shaderResourceResidency:        VkBool32 = 1
        shaderResourceMinLod:           VkBool32 = 1
        sparseBinding:                  VkBool32 = 1
        sparseResidencyBuffer:          VkBool32 = 1
        sparseResidencyImage2D:         VkBool32 = 1
        sparseResidencyImage3D:         VkBool32 = 1
        sparseResidency2Samples:        VkBool32 = 1
        sparseResidency4Samples:        VkBool32 = 1
        sparseResidency8Samples:        VkBool32 = 1
        sparseResidency16Samples:       VkBool32 = 1
        sparseResidencyAliased:         VkBool32 = 1
        variableMultisampleRate:        VkBool32 = 1
        inheritedQueries:               VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties* = 0x7ffd652a1b00:
        apiVersion:                     uint32_t = 4206834
        driverVersion:                  uint32_t = 2246754560
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 8710
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1c14
            pipelineCacheUUID[0]:           uint8_t = 187
            pipelineCacheUUID[1]:           uint8_t = 3
            pipelineCacheUUID[2]:           uint8_t = 117
            pipelineCacheUUID[3]:           uint8_t = 135
            pipelineCacheUUID[4]:           uint8_t = 10
            pipelineCacheUUID[5]:           uint8_t = 1
            pipelineCacheUUID[6]:           uint8_t = 217
            pipelineCacheUUID[7]:           uint8_t = 83
            pipelineCacheUUID[8]:           uint8_t = 116
            pipelineCacheUUID[9]:           uint8_t = 106
            pipelineCacheUUID[10]:          uint8_t = 194
            pipelineCacheUUID[11]:          uint8_t = 145
            pipelineCacheUUID[12]:          uint8_t = 194
            pipelineCacheUUID[13]:          uint8_t = 114
            pipelineCacheUUID[14]:          uint8_t = 70
            pipelineCacheUUID[15]:          uint8_t = 106
        limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1c28:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1d04
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1d14
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1d40
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0x7ffd652a1d48
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x7ffd652a1de4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0x7ffd652a1dec
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1e20:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pCreateInfo:                    const VkDeviceCreateInfo* = 0x7ffd652a1840:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 2
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 0x5cacd9390d08
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 0x5cacd9390d08:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 16
                pQueuePriorities:               const float* = 0x5cacd96f3a70
                    pQueuePriorities[0]:            const float = 1
                    pQueuePriorities[1]:            const float = 1
                    pQueuePriorities[2]:            const float = 1
                    pQueuePriorities[3]:            const float = 1
                    pQueuePriorities[4]:            const float = 1
                    pQueuePriorities[5]:            const float = 1
                    pQueuePriorities[6]:            const float = 1
                    pQueuePriorities[7]:            const float = 1
                    pQueuePriorities[8]:            const float = 1
                    pQueuePriorities[9]:            const float = 1
                    pQueuePriorities[10]:           const float = 1
                    pQueuePriorities[11]:           const float = 1
                    pQueuePriorities[12]:           const float = 1
                    pQueuePriorities[13]:           const float = 1
                    pQueuePriorities[14]:           const float = 1
                    pQueuePriorities[15]:           const float = 1
            pQueueCreateInfos[1]:           const VkDeviceQueueCreateInfo = 0x5cacd9390d30:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 4
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 0x5cacd96f4770
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = 0x5cacd96f4d20
        enabledExtensionCount:          uint32_t = 1
        ppEnabledExtensionNames:        const char* const* = 0x5cacd96f4790
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 0x5cacd96f2980:
            robustBufferAccess:             VkBool32 = 0
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 0
            independentBlend:               VkBool32 = 0
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 0
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 0
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 0x5cacd9727970

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties* = 0x7ffd652a1020:
        apiVersion:                     uint32_t = 4206834
        driverVersion:                  uint32_t = 2246754560
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 8710
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
            pipelineCacheUUID[0]:           uint8_t = 187
            pipelineCacheUUID[1]:           uint8_t = 3
            pipelineCacheUUID[2]:           uint8_t = 117
            pipelineCacheUUID[3]:           uint8_t = 135
            pipelineCacheUUID[4]:           uint8_t = 10
            pipelineCacheUUID[5]:           uint8_t = 1
            pipelineCacheUUID[6]:           uint8_t = 217
            pipelineCacheUUID[7]:           uint8_t = 83
            pipelineCacheUUID[8]:           uint8_t = 116
            pipelineCacheUUID[9]:           uint8_t = 106
            pipelineCacheUUID[10]:          uint8_t = 194
            pipelineCacheUUID[11]:          uint8_t = 145
            pipelineCacheUUID[12]:          uint8_t = 194
            pipelineCacheUUID[13]:          uint8_t = 114
            pipelineCacheUUID[14]:          uint8_t = 70
            pipelineCacheUUID[15]:          uint8_t = 106
        limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0x7ffd652a1268
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x7ffd652a1304
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0x7ffd652a130c
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1360:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceMaintenance4Properties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1370:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1484
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1498:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1574
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1584
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a15b0
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a15b8
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1654
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a165c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1690:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceMaintenance4Properties = 0x7ffd652a0e90:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES (1000413001)
            pNext:                          void* = NULL
            maxBufferSize:                  VkDeviceSize = 1099511562240

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1360:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceDepthStencilResolveProperties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1370:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1484
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1498:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1574
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1584
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a15b0
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a15b8
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1654
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a165c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1690:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceDepthStencilResolveProperties = 0x7ffd652a0e90:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES (1000199000)
            pNext:                          void* = NULL
            supportedDepthResolveModes:     VkResolveModeFlags = 15 (VK_RESOLVE_MODE_SAMPLE_ZERO_BIT | VK_RESOLVE_MODE_AVERAGE_BIT | VK_RESOLVE_MODE_MIN_BIT | VK_RESOLVE_MODE_MAX_BIT)
            supportedStencilResolveModes:   VkResolveModeFlags = 13 (VK_RESOLVE_MODE_SAMPLE_ZERO_BIT | VK_RESOLVE_MODE_MIN_BIT | VK_RESOLVE_MODE_MAX_BIT)
            independentResolveNone:         VkBool32 = 1
            independentResolve:             VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x5cacd971b240:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x5cacd971b244
            memoryTypes[0]:                 VkMemoryType = 0x5cacd971b244:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x5cacd971b24c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x5cacd971b254:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x5cacd971b25c:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x5cacd971b264:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x5cacd971b348
            memoryHeaps[0]:                 VkMemoryHeap = 0x5cacd971b348:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x5cacd971b358:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x5cacd971b368:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties* = 0x5cacd971b448:
        apiVersion:                     uint32_t = 4206834
        driverVersion:                  uint32_t = 2246754560
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 8710
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x5cacd971b55c
            pipelineCacheUUID[0]:           uint8_t = 187
            pipelineCacheUUID[1]:           uint8_t = 3
            pipelineCacheUUID[2]:           uint8_t = 117
            pipelineCacheUUID[3]:           uint8_t = 135
            pipelineCacheUUID[4]:           uint8_t = 10
            pipelineCacheUUID[5]:           uint8_t = 1
            pipelineCacheUUID[6]:           uint8_t = 217
            pipelineCacheUUID[7]:           uint8_t = 83
            pipelineCacheUUID[8]:           uint8_t = 116
            pipelineCacheUUID[9]:           uint8_t = 106
            pipelineCacheUUID[10]:          uint8_t = 194
            pipelineCacheUUID[11]:          uint8_t = 145
            pipelineCacheUUID[12]:          uint8_t = 194
            pipelineCacheUUID[13]:          uint8_t = 114
            pipelineCacheUUID[14]:          uint8_t = 70
            pipelineCacheUUID[15]:          uint8_t = 106
        limits:                         VkPhysicalDeviceLimits = 0x5cacd971b570:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4294967295
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0x5cacd971b64c
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0x5cacd971b65c
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0x5cacd971b688
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0x5cacd971b690
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0x5cacd971b72c
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0x5cacd971b734
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0x5cacd971b768:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1010:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceVulkan11Properties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1020:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1268
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1304
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a130c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceVulkan11Properties = 0x5cacd971b780:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES (50)
            pNext:                          void* = NULL
            deviceUUID:                     uint8_t[VK_UUID_SIZE] = 0x5cacd971b790
                deviceUUID[0]:                  uint8_t = 23
                deviceUUID[1]:                  uint8_t = 31
                deviceUUID[2]:                  uint8_t = 98
                deviceUUID[3]:                  uint8_t = 64
                deviceUUID[4]:                  uint8_t = 155
                deviceUUID[5]:                  uint8_t = 18
                deviceUUID[6]:                  uint8_t = 202
                deviceUUID[7]:                  uint8_t = 39
                deviceUUID[8]:                  uint8_t = 96
                deviceUUID[9]:                  uint8_t = 77
                deviceUUID[10]:                 uint8_t = 125
                deviceUUID[11]:                 uint8_t = 243
                deviceUUID[12]:                 uint8_t = 214
                deviceUUID[13]:                 uint8_t = 17
                deviceUUID[14]:                 uint8_t = 110
                deviceUUID[15]:                 uint8_t = 217
            driverUUID:                     uint8_t[VK_UUID_SIZE] = 0x5cacd971b7a0
                driverUUID[0]:                  uint8_t = 158
                driverUUID[1]:                  uint8_t = 155
                driverUUID[2]:                  uint8_t = 238
                driverUUID[3]:                  uint8_t = 194
                driverUUID[4]:                  uint8_t = 1
                driverUUID[5]:                  uint8_t = 160
                driverUUID[6]:                  uint8_t = 90
                driverUUID[7]:                  uint8_t = 86
                driverUUID[8]:                  uint8_t = 171
                driverUUID[9]:                  uint8_t = 26
                driverUUID[10]:                 uint8_t = 16
                driverUUID[11]:                 uint8_t = 2
                driverUUID[12]:                 uint8_t = 196
                driverUUID[13]:                 uint8_t = 210
                driverUUID[14]:                 uint8_t = 223
                driverUUID[15]:                 uint8_t = 177
            deviceLUID:                     uint8_t[VK_LUID_SIZE] = 0x5cacd971b7b0
                deviceLUID[0]:                  uint8_t = 0
                deviceLUID[1]:                  uint8_t = 0
                deviceLUID[2]:                  uint8_t = 0
                deviceLUID[3]:                  uint8_t = 0
                deviceLUID[4]:                  uint8_t = 0
                deviceLUID[5]:                  uint8_t = 0
                deviceLUID[6]:                  uint8_t = 0
                deviceLUID[7]:                  uint8_t = 0
            deviceNodeMask:                 uint32_t = 1
            deviceLUIDValid:                VkBool32 = 0
            subgroupSize:                   uint32_t = 32
            subgroupSupportedStages:        VkShaderStageFlags = 16383 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_ANY_HIT_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR | VK_SHADER_STAGE_INTERSECTION_BIT_KHR | VK_SHADER_STAGE_CALLABLE_BIT_KHR | VK_SHADER_STAGE_TASK_BIT_EXT | VK_SHADER_STAGE_MESH_BIT_EXT)
            subgroupSupportedOperations:    VkSubgroupFeatureFlags = 511 (VK_SUBGROUP_FEATURE_BASIC_BIT | VK_SUBGROUP_FEATURE_VOTE_BIT | VK_SUBGROUP_FEATURE_ARITHMETIC_BIT | VK_SUBGROUP_FEATURE_BALLOT_BIT | VK_SUBGROUP_FEATURE_SHUFFLE_BIT | VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT | VK_SUBGROUP_FEATURE_CLUSTERED_BIT | VK_SUBGROUP_FEATURE_QUAD_BIT | VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV)
            subgroupQuadOperationsInAllStages: VkBool32 = 1
            pointClippingBehavior:          VkPointClippingBehavior = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY (1)
            maxMultiviewViewCount:          uint32_t = 32
            maxMultiviewInstanceIndex:      uint32_t = 134217727
            protectedNoFault:               VkBool32 = 0
            maxPerSetDescriptors:           uint32_t = 4294967295
            maxMemoryAllocationSize:        VkDeviceSize = 4292870144

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1010:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceVulkan12Properties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1020:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1268
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1304
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a130c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceVulkan12Properties = 0x5cacd971b7f0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES (52)
            pNext:                          void* = NULL
            driverID:                       VkDriverId = VK_DRIVER_ID_NVIDIA_PROPRIETARY (4)
            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "NVIDIA"
            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "535.171.04"
            conformanceVersion:             VkConformanceVersion = 0x5cacd971ba04:
                major:                          uint8_t = 1
                minor:                          uint8_t = 3
                subminor:                       uint8_t = 5
                patch:                          uint8_t = 0
            denormBehaviorIndependence:     VkShaderFloatControlsIndependence = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL (1)
            roundingModeIndependence:       VkShaderFloatControlsIndependence = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL (1)
            shaderSignedZeroInfNanPreserveFloat16: VkBool32 = 1
            shaderSignedZeroInfNanPreserveFloat32: VkBool32 = 1
            shaderSignedZeroInfNanPreserveFloat64: VkBool32 = 1
            shaderDenormPreserveFloat16:    VkBool32 = 1
            shaderDenormPreserveFloat32:    VkBool32 = 0
            shaderDenormPreserveFloat64:    VkBool32 = 0
            shaderDenormFlushToZeroFloat16: VkBool32 = 0
            shaderDenormFlushToZeroFloat32: VkBool32 = 0
            shaderDenormFlushToZeroFloat64: VkBool32 = 0
            shaderRoundingModeRTEFloat16:   VkBool32 = 1
            shaderRoundingModeRTEFloat32:   VkBool32 = 1
            shaderRoundingModeRTEFloat64:   VkBool32 = 1
            shaderRoundingModeRTZFloat16:   VkBool32 = 0
            shaderRoundingModeRTZFloat32:   VkBool32 = 1
            shaderRoundingModeRTZFloat64:   VkBool32 = 1
            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 4294967295
            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 1
            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 1
            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 1
            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 1
            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 1
            robustBufferAccessUpdateAfterBind: VkBool32 = 1
            quadDivergentImplicitLod:       VkBool32 = 1
            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576
            maxPerStageUpdateAfterBindResources: uint32_t = 4294967295
            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576
            supportedDepthResolveModes:     VkResolveModeFlags = 15 (VK_RESOLVE_MODE_SAMPLE_ZERO_BIT | VK_RESOLVE_MODE_AVERAGE_BIT | VK_RESOLVE_MODE_MIN_BIT | VK_RESOLVE_MODE_MAX_BIT)
            supportedStencilResolveModes:   VkResolveModeFlags = 13 (VK_RESOLVE_MODE_SAMPLE_ZERO_BIT | VK_RESOLVE_MODE_MIN_BIT | VK_RESOLVE_MODE_MAX_BIT)
            independentResolveNone:         VkBool32 = 1
            independentResolve:             VkBool32 = 1
            filterMinmaxSingleComponentFormats: VkBool32 = 1
            filterMinmaxImageComponentMapping: VkBool32 = 1
            maxTimelineSemaphoreValueDifference: uint64_t = 18446744073709551615
            framebufferIntegerColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1010:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceVulkan13Properties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1020:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1268
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1304
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a130c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceVulkan13Properties = 0x5cacd971bad0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES (54)
            pNext:                          void* = NULL
            minSubgroupSize:                uint32_t = 32
            maxSubgroupSize:                uint32_t = 32
            maxComputeWorkgroupSubgroups:   uint32_t = 2097152
            requiredSubgroupSizeStages:     VkShaderStageFlags = 16383 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_ANY_HIT_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR | VK_SHADER_STAGE_INTERSECTION_BIT_KHR | VK_SHADER_STAGE_CALLABLE_BIT_KHR | VK_SHADER_STAGE_TASK_BIT_EXT | VK_SHADER_STAGE_MESH_BIT_EXT)
            maxInlineUniformBlockSize:      uint32_t = 256
            maxPerStageDescriptorInlineUniformBlocks: uint32_t = 32
            maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32_t = 32
            maxDescriptorSetInlineUniformBlocks: uint32_t = 32
            maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32_t = 32
            maxInlineUniformTotalSize:      uint32_t = 3584
            integerDotProduct8BitUnsignedAccelerated: VkBool32 = 1
            integerDotProduct8BitSignedAccelerated: VkBool32 = 1
            integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = 1
            integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = 1
            integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = 1
            integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = 1
            integerDotProduct16BitUnsignedAccelerated: VkBool32 = 0
            integerDotProduct16BitSignedAccelerated: VkBool32 = 0
            integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = 0
            integerDotProduct32BitUnsignedAccelerated: VkBool32 = 0
            integerDotProduct32BitSignedAccelerated: VkBool32 = 0
            integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = 0
            integerDotProduct64BitUnsignedAccelerated: VkBool32 = 0
            integerDotProduct64BitSignedAccelerated: VkBool32 = 0
            integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = 0
            integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = 1
            integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = 1
            storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = 16
            storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = 1
            uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = 16
            uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = 1
            maxBufferSize:                  VkDeviceSize = 1099511562240

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1010:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceInlineUniformBlockProperties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1020:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1268
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1304
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a130c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceInlineUniformBlockProperties = 0x5cacd971bd08:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES (1000138001)
            pNext:                          void* = NULL
            maxInlineUniformBlockSize:      uint32_t = 256
            maxPerStageDescriptorInlineUniformBlocks: uint32_t = 32
            maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32_t = 32
            maxDescriptorSetInlineUniformBlocks: uint32_t = 32
            maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32_t = 32

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1010:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceTexelBufferAlignmentProperties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1020:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1268
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1304
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a130c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceTexelBufferAlignmentProperties = 0x5cacd971be68:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES (1000281001)
            pNext:                          void* = NULL
            storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = 16
            storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = 1
            uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = 16
            uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1010:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceMultiviewProperties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1020:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1268
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1304
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a130c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceMultiviewProperties = 0x5cacd971bf58:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES (1000053002)
            pNext:                          void* = NULL
            maxMultiviewViewCount:          uint32_t = 32
            maxMultiviewInstanceIndex:      uint32_t = 134217727

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1010:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceSubgroupSizeControlProperties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1020:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1268
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1304
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a130c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceSubgroupSizeControlProperties = 0x5cacd971c090:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES (1000225000)
            pNext:                          void* = NULL
            minSubgroupSize:                uint32_t = 32
            maxSubgroupSize:                uint32_t = 32
            maxComputeWorkgroupSubgroups:   uint32_t = 2097152
            requiredSubgroupSizeStages:     VkShaderStageFlags = 16383 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_ANY_HIT_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR | VK_SHADER_STAGE_INTERSECTION_BIT_KHR | VK_SHADER_STAGE_CALLABLE_BIT_KHR | VK_SHADER_STAGE_TASK_BIT_EXT | VK_SHADER_STAGE_MESH_BIT_EXT)

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pProperties:                    VkPhysicalDeviceProperties2* = 0x7ffd652a1010:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceSubgroupProperties
        properties:                     VkPhysicalDeviceProperties = 0x7ffd652a1020:
            apiVersion:                     uint32_t = 4206834
            driverVersion:                  uint32_t = 2246754560
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 8710
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3080"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0x7ffd652a1134
                pipelineCacheUUID[0]:           uint8_t = 187
                pipelineCacheUUID[1]:           uint8_t = 3
                pipelineCacheUUID[2]:           uint8_t = 117
                pipelineCacheUUID[3]:           uint8_t = 135
                pipelineCacheUUID[4]:           uint8_t = 10
                pipelineCacheUUID[5]:           uint8_t = 1
                pipelineCacheUUID[6]:           uint8_t = 217
                pipelineCacheUUID[7]:           uint8_t = 83
                pipelineCacheUUID[8]:           uint8_t = 116
                pipelineCacheUUID[9]:           uint8_t = 106
                pipelineCacheUUID[10]:          uint8_t = 194
                pipelineCacheUUID[11]:          uint8_t = 145
                pipelineCacheUUID[12]:          uint8_t = 194
                pipelineCacheUUID[13]:          uint8_t = 114
                pipelineCacheUUID[14]:          uint8_t = 70
                pipelineCacheUUID[15]:          uint8_t = 106
            limits:                         VkPhysicalDeviceLimits = 0x7ffd652a1148:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4294967295
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 0x7ffd652a1224
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 0x7ffd652a1234
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 0x7ffd652a1260
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 0x7ffd652a1268
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 0x7ffd652a1304
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 0x7ffd652a130c
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 0x7ffd652a1340:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceSubgroupProperties = 0x5cacd971c0b0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES (1000094000)
            pNext:                          void* = NULL
            subgroupSize:                   uint32_t = 32
            supportedStages:                VkShaderStageFlags = 16383 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_ANY_HIT_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR | VK_SHADER_STAGE_INTERSECTION_BIT_KHR | VK_SHADER_STAGE_CALLABLE_BIT_KHR | VK_SHADER_STAGE_TASK_BIT_EXT | VK_SHADER_STAGE_MESH_BIT_EXT)
            supportedOperations:            VkSubgroupFeatureFlags = 511 (VK_SUBGROUP_FEATURE_BASIC_BIT | VK_SUBGROUP_FEATURE_VOTE_BIT | VK_SUBGROUP_FEATURE_ARITHMETIC_BIT | VK_SUBGROUP_FEATURE_BALLOT_BIT | VK_SUBGROUP_FEATURE_SHUFFLE_BIT | VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT | VK_SUBGROUP_FEATURE_CLUSTERED_BIT | VK_SUBGROUP_FEATURE_QUAD_BIT | VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV)
            quadOperationsInAllStages:      VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pQueueFamilyPropertyCount:      uint32_t* = 5
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pQueueFamilyPropertyCount:      uint32_t* = 5
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0x5cacdab45540
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0x5cacdab45540:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacdab4554c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 0x5cacdab45558:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacdab45564:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 0x5cacdab45570:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacdab4557c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 0x5cacdab45588:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0x5cacdab45594:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 0x5cacdab455a0:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x5cacdab455ac:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 0x5cacd945e4b0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 1
    pQueue:                         VkQueue* = 0x5cacd94917e0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 2
    pQueue:                         VkQueue* = 0x5cacd9b4f0c0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 3
    pQueue:                         VkQueue* = 0x5cacd9c5f130

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 4
    pQueue:                         VkQueue* = 0x5cacd9d65920

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 5
    pQueue:                         VkQueue* = 0x5cacd9e6d3a0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 6
    pQueue:                         VkQueue* = 0x5cacd9f73c00

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 7
    pQueue:                         VkQueue* = 0x5cacda086ff0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 8
    pQueue:                         VkQueue* = 0x5cacda190110

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 9
    pQueue:                         VkQueue* = 0x5cacda298f70

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 10
    pQueue:                         VkQueue* = 0x5cacda3a41f0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 11
    pQueue:                         VkQueue* = 0x5cacda4ad2c0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 12
    pQueue:                         VkQueue* = 0x5cacda5b8540

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 13
    pQueue:                         VkQueue* = 0x5cacda6c13a0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 14
    pQueue:                         VkQueue* = 0x5cacda7ca200

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 15
    pQueue:                         VkQueue* = 0x5cacda91abc0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 4
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 0x5cacdaa288e0

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pQueueFamilyPropertyCount:      uint32_t* = 5
    pQueueFamilyProperties:         VkQueueFamilyProperties2* = 0x5cacd96fa690
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties2 = 0x5cacd96fa690:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext:                          void* = NULL
            queueFamilyProperties:          VkQueueFamilyProperties = 0x5cacd96fa6a0:
                queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
                queueCount:                     uint32_t = 16
                timestampValidBits:             uint32_t = 64
                minImageTransferGranularity:    VkExtent3D = 0x5cacd96fa6ac:
                    width:                          uint32_t = 1
                    height:                         uint32_t = 1
                    depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties2 = 0x5cacd96fa6b8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext:                          void* = NULL
            queueFamilyProperties:          VkQueueFamilyProperties = 0x5cacd96fa6c8:
                queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
                queueCount:                     uint32_t = 2
                timestampValidBits:             uint32_t = 64
                minImageTransferGranularity:    VkExtent3D = 0x5cacd96fa6d4:
                    width:                          uint32_t = 1
                    height:                         uint32_t = 1
                    depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties2 = 0x5cacd96fa6e0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext:                          void* = NULL
            queueFamilyProperties:          VkQueueFamilyProperties = 0x5cacd96fa6f0:
                queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
                queueCount:                     uint32_t = 8
                timestampValidBits:             uint32_t = 64
                minImageTransferGranularity:    VkExtent3D = 0x5cacd96fa6fc:
                    width:                          uint32_t = 1
                    height:                         uint32_t = 1
                    depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties2 = 0x5cacd96fa708:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext:                          void* = NULL
            queueFamilyProperties:          VkQueueFamilyProperties = 0x5cacd96fa718:
                queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
                queueCount:                     uint32_t = 1
                timestampValidBits:             uint32_t = 32
                minImageTransferGranularity:    VkExtent3D = 0x5cacd96fa724:
                    width:                          uint32_t = 1
                    height:                         uint32_t = 1
                    depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties2 = 0x5cacd96fa730:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext:                          void* = NULL
            queueFamilyProperties:          VkQueueFamilyProperties = 0x5cacd96fa740:
                queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
                queueCount:                     uint32_t = 1
                timestampValidBits:             uint32_t = 64
                minImageTransferGranularity:    VkExtent3D = 0x5cacd96fa74c:
                    width:                          uint32_t = 1
                    height:                         uint32_t = 1
                    depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 0x5cacd945e4b0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 1
    pQueue:                         VkQueue* = 0x5cacd94917e0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 2
    pQueue:                         VkQueue* = 0x5cacd9b4f0c0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 3
    pQueue:                         VkQueue* = 0x5cacd9c5f130

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 4
    pQueue:                         VkQueue* = 0x5cacd9d65920

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 5
    pQueue:                         VkQueue* = 0x5cacd9e6d3a0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 6
    pQueue:                         VkQueue* = 0x5cacd9f73c00

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 7
    pQueue:                         VkQueue* = 0x5cacda086ff0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 8
    pQueue:                         VkQueue* = 0x5cacda190110

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 9
    pQueue:                         VkQueue* = 0x5cacda298f70

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 10
    pQueue:                         VkQueue* = 0x5cacda3a41f0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 11
    pQueue:                         VkQueue* = 0x5cacda4ad2c0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 12
    pQueue:                         VkQueue* = 0x5cacda5b8540

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 13
    pQueue:                         VkQueue* = 0x5cacda6c13a0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 14
    pQueue:                         VkQueue* = 0x5cacda7ca200

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 15
    pQueue:                         VkQueue* = 0x5cacda91abc0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x5cacd9727970
    queueFamilyIndex:               uint32_t = 4
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 0x5cacdaa288e0

Thread 0, Frame 0:
vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x5cacd945c5a0
    pCreateInfo:                    const VkXcbSurfaceCreateInfoKHR* = 0x7ffd652a2300:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR (1000005000)
        pNext:                          const void* = NULL
        flags:                          VkXcbSurfaceCreateFlagsKHR = 0
        connection:                     xcb_connection_t* = 0x5cacd92f3020
        window:                         xcb_window_t = 41943049
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSurface:                       VkSurfaceKHR* = 0x5cacd9391010

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9470130

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd94716e0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9475560

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd94738b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9460710

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9317600

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd97106d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9711390

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9712210

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9712e90

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9713b50

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9714810

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd97154d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9716190

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacd9716e50

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac4f6d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac4fc70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac508d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac51510

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac52190

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac52e10

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac53a90

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac547c0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac552d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac55f10

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac56b90

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac57ae0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac58a10

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac59920

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac5a440

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac5ac70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac5b620

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac5c290

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac5cf10

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac5db90

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac5e810

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac5f490

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac60110

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac60d90

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac615f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac62250

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac62ed0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac63b50

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac647d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac65450

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac65cb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac66aa0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac673b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac68010

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac68c90

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac69ec0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6a730

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6b940

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6cb40

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6d3b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6dbf0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6e430

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6f090

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6f8f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac704f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac71150

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac719b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac722f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac73050

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac738b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac740f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac74930

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac75170

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac759b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac761f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac76a30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac77690

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac78310

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac78f90

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac797f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7a030

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7a870

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7b4d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7bd30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7c670

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7ceb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7db10

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7e770

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7efb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac7f7f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac80030

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac80870

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac814d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac81d30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac82570

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac831d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac83a30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac84270

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac84ab0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac852f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac86050

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac868b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac87510

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac664f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac88b30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac893b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8a010

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6b390

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac6c550

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac69910

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8d430

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8dcb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8e4f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8ed30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8f570

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac905d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac90e30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac91670

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac922d0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac92b30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac93370

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac93bb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac943f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac95050

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac958b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac960f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac96930

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac97170

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac979b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac981f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac98a30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac99270

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac99ab0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9a2f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9ab30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9b370

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9bbb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9c3f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9cc30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9d630

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9de70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9e6b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9eef0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac9f930

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca0170

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca09b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca11f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca1a30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca2270

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca2ed0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca3730

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca4330

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca4b70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca53b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca5bf0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca6430

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca6c70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca74b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca7cf0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca8530

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca8d70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca95b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaca9df0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacaa630

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacaae70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacab6b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacabef0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacac730

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacacf70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacad7b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacadff0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacae830

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacaf070

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacaf8b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb00f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb10f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb1930

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb2170

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb29b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb31f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb3a30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb4270

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb4ab0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb52f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb5f30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb6770

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb6fb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb77f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb8030

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb8870

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb90b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacb98f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacba130

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacba970

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbb1b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbb9f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbc230

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbca70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbd2b0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbdaf0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbe330

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbef30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacbff30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacc0770

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacc0fb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacc17f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacc2030

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac87d70

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac885f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacc4470

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacc4cb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8b870

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8c0f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8aff0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8c670

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdac8ceb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacca5f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaccb690

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaccbeb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaccc6f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacccf30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaccd770

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaccdfb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacce7f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaccf030

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdaccff40

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd0670

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd0eb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd16f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd2550

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd2bb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd33f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd43f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd4c30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd5470

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd5cb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd64f0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd6d30

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd7570

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd7db0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd8e50

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd9670

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacd9eb0

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacdad10

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd652a22c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x5cacdacdb3b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7db10
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdacdd570

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacd93a7540

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7db10
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdace09e0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacd93d0370

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7db10
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdace4670

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdace85b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7db10
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdace8d70

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaceccf0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7db10
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaced580

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdacf16a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7efb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdacf1bd0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdacf5fb0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7efb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdacf6600

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdacfa490

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7efb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdacfac80

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdacff2f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7efb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdacffac0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad04130

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7efb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad04690

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad08910

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac80030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad09100

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad0d9c0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac80030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad0e1c0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad12830

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac80030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad13020

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad176b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac80030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad17e80

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad1c7c0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac80030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad1cea0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad21470

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac814d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad21e00

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad26700

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac814d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad26c20

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad2ae90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac814d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad2b6b0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad2fcf0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac814d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad304e0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad34a70

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac814d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad35290

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad39510

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac82570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad39ea0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad3e780

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac82570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad3ef80

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad435f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac82570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad43dc0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad48430

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac82570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad48c20

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad4d1a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac82570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad4db20

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad52000

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac83a30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad529a0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad57280

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac83a30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad57d50

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad5bfd0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac83a30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad5c920

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad60e40

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac83a30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad61910

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad65b90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac83a30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad660f0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad6a5c0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac84ab0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad6b120

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad6fa00

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac84ab0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad70200

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad74870

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac84ab0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad74d80

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad793f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac84ab0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad79be0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad7e270

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac84ab0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad7ebb0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad82e10

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac86050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad834c0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad87f50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac86050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad88460

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad8ccc0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac86050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad8d1e0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad91830

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac86050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad92020

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad966b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac86050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad96ed0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad9b150

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac87510
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdad9b800

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdada00c0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac87510
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdada09e0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdada4c50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac87510
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdada5190

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdada97f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac87510
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdada9e50

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadae4b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac87510
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadaecf0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadb3330

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac88b30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadb39e0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadb8150

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac88b30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadb8940

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadbcfb0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac88b30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadbd4f0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadc1b30

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac88b30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadc25f0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadc6890

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac88b30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadc6df0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadcb050

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8a010
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadcbcb0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadd01a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8a010
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadd0f70

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadd51d0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8a010
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadd5cc0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadda2f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8a010
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadda800

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaddea90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8a010
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaddf2d0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdade3930

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6c550
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdade42a0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdade87a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6c550
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdade8ce0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaded330

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6c550
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadedb50

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadf21b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6c550
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadf26a0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadf6950

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6c550
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadf6eb0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdadfb6c0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8d430
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdadfbd80

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae00260

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8d430
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae007a0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae04df0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8d430
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae05330

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae09970

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8d430
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae09e80

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae0e4f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8d430
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae0ee30

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae13090

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8e4f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae13740

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae17c60

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8e4f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae181a0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae1c410

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8e4f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae1c920

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae20b90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8e4f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae210a0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae25350

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8e4f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae258b0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae29ef0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8f570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae2a860

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae2ed60

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8f570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae2f2a0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad8c710

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8f570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae34310

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae38930

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8f570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae39500

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae3db70

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac8f570
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae3e0b0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae42310

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac90e30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae42ca0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae471a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac90e30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae479c0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae4bc50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac90e30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae4c160

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae503d0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac90e30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae508e0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae54b90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac90e30
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae553d0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae599f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac922d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae5a380

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae5f8a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac922d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae600c0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae64310

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac922d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae64850

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae69080

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac922d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae695a0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae6d810

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac922d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae6dd70

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae723b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac93370
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae72a60

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae76f60

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac93370
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae77780

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae7ba10

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac93370
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae7c2e0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae80970

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac93370
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae81620

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae858d0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac93370
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae86110

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae8a350

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac943f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae8aa00

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdad879a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac943f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae8fa30

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae93c50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac943f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae94440

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae98ab0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac943f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae98fc0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdae9d250

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac943f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdae9d7b0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaea1a10

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac958b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaea20c0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaea65e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac958b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaea6b20

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaeab170

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac958b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaeab660

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaeafcf0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac958b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaeb0d30

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaeb4a10

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a2020:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac958b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22f8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaeb4f70

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdaeb95b0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd652a2310:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x5cacdaeb9da0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac62ed0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaeba990

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac62ed0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaebee60

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac62ed0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaec30c0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac62ed0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaec7310

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac62ed0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaecb5a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac647d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaecf8f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac647d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaed3da0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac647d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaed8000

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac647d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaedc250

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac647d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaee04e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac65cb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaee4c10

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac65cb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaee90a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac65cb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaeed310

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac65cb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaef1550

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac65cb0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaef57e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac673b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaef9b30

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac673b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaefdfe0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac673b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf02620

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac673b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf06850

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac673b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf0aae0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac68c90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf0f210

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac68c90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf136e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac68c90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf17940

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac68c90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf1bb90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac68c90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf1fe20

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6a730
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf24170

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6a730
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf28a20

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6a730
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf2cc90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6a730
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf316d0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6a730
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf35960

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6cb40
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf39cb0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6cb40
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf3ecb0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6cb40
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf42980

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6cb40
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf46bd0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6cb40
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf4b960

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6dbf0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf4f730

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6dbf0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf53be0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6dbf0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf57e50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6dbf0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf5c470

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6dbf0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf606e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6f090
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf64a30

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6f090
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf68ee0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6f090
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf6e7e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6f090
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf71ed0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac6f090
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf76160

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac704f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf7a4b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac704f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf7e960

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac704f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf82bc0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac704f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf86e10

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac704f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf8b0a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac719b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf8f3f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac719b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf938a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac719b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf97b00

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac719b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf9bd50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac719b0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaf9ffe0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac73050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafa4330

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac73050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafa87e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac73050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafaca40

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac73050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafb0c90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac73050
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafb4f20

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac740f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafb9270

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac740f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafbd620

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac740f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafc1880

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac740f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafc5ad0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac740f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafc9d60

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac75170
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafce1b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac75170
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafd2a40

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac75170
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafd6c90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac75170
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafdaed0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac75170
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafdf160

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac761f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafe34b0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac761f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafe7960

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac761f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafebbc0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac761f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdafefe10

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac761f0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaff40a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac77690
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaff83f0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac77690
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdaffc8a0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac77690
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb000b00

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac77690
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb004d50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac77690
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb008fe0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac78f90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb00d330

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac78f90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb0117e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac78f90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb015e20

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac78f90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb01a050

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac78f90
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb01e2e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7a030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb022630

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7a030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb0269e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7a030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb02ac50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7a030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb02ee90

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7a030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb033120

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7b4d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb037470

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7b4d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb03b920

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7b4d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb03fb80

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7b4d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb043dd0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7b4d0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb048160

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7c670
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb04ca50

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7c670
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb050de0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7c670
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb0557e0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7c670
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb059a10

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a1ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac7c670
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a22e8
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb05dca0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd652a2310:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x5cacdb061ed0

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd652a2170:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0x7ffd652a2178:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        minImageExtent:                 VkExtent2D = 0x7ffd652a2180:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageExtent:                 VkExtent2D = 0x7ffd652a2188:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0x5cacdb062590
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0x5cacdb062590:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0x5cacdb062598:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0x5cacdb08bb90
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0x5cacdb08bb90:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0x5cacdb08bb98:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1b00:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1b10:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a1c90:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
    tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    flags:                          VkImageCreateFlags = 0
    pImageFormatProperties:         VkImageFormatProperties* = 0x7ffd652a1c10:
        maxExtent:                      VkExtent3D = 0x7ffd652a1c10:
            width:                          uint32_t = 32768
            height:                         uint32_t = 32768
            depth:                          uint32_t = 1
        maxMipLevels:                   uint32_t = 16
        maxArrayLayers:                 uint32_t = 2048
        sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
        maxResourceSize:                VkDeviceSize = 1099511627775

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 0x7ffd652a1f60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)
        pNext:                          const void* = NULL
        flags:                          VkSwapchainCreateFlagsKHR = 0
        surface:                        VkSurfaceKHR = 0x5cacd9391010
        minImageCount:                  uint32_t = 2
        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:                    VkExtent2D = 0x7ffd652a1f8c:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        imageArrayLayers:               uint32_t = 1
        imageUsage:                     VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb08bb90
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        clipped:                        VkBool32 = 1
        oldSwapchain:                   VkSwapchainKHR = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSwapchain:                     VkSwapchainKHR* = 0x5cacdb08d280

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    swapchain:                      VkSwapchainKHR = 0x5cacdb08d280
    pSwapchainImageCount:           uint32_t* = 2
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    swapchain:                      VkSwapchainKHR = 0x5cacdb08d280
    pSwapchainImageCount:           uint32_t* = 2
    pSwapchainImages:               VkImage* = 0x5cacdb1cbfe0
        pSwapchainImages[0]:            VkImage = 0x5cacdb1c7af0
        pSwapchainImages[1]:            VkImage = 0x5cacdb1c8240

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1e60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1e70:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a1e80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1e60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1e70:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a1e80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    swapchain:                      VkSwapchainKHR = 0x5cacdb08d280
    pSwapchainImageCount:           uint32_t* = 2
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    swapchain:                      VkSwapchainKHR = 0x5cacdb08d280
    pSwapchainImageCount:           uint32_t* = 2
    pSwapchainImages:               VkImage* = 0x5cacdb1cbfe0
        pSwapchainImages[0]:            VkImage = 0x5cacdb1c7af0
        pSwapchainImages[1]:            VkImage = 0x5cacdb1c8240

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0x5cacdb1cd3a0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0x5cacdb1cd3a0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0x5cacdb1cd3a8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1b40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1b50:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a1c30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd652a1ea0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0x5cacdb1c7af0
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0x7ffd652a1ec8:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd652a1ed8:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0x5cacd95cecf0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1d90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1da0:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a1db0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0x5cacdb1cd3a0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0x5cacdb1cd3a0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0x5cacdb1cd3a8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1b40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1b50:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a1c30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd652a1ea0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0x5cacdb1c8240
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0x7ffd652a1ec8:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd652a1ed8:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0x5cacd9473b20

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1d90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1da0:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a1db0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd652a1f80:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0x7ffd652a1f88:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        minImageExtent:                 VkExtent2D = 0x7ffd652a1f90:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageExtent:                 VkExtent2D = 0x7ffd652a1f98:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1f3c:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd652a1f10:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0x7ffd652a1f18:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        minImageExtent:                 VkExtent2D = 0x7ffd652a1f20:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageExtent:                 VkExtent2D = 0x7ffd652a1f28:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd652a1f10:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0x7ffd652a1f18:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        minImageExtent:                 VkExtent2D = 0x7ffd652a1f20:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageExtent:                 VkExtent2D = 0x7ffd652a1f28:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 0x7ffd652a18f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = NULL
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 34 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
    pImageFormatProperties:         VkImageFormatProperties2* = 0x7ffd652a1950:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = NULL
        imageFormatProperties:          VkImageFormatProperties = 0x7ffd652a1960:
            maxExtent:                      VkExtent3D = 0x7ffd652a1960:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1630:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1640:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 0
        pNext:                          VkFormatProperties3 = 0x7ffd652a1720:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 8590054401 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 8590056961 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkImageCreateInfo* = 0x7ffd652a1b00:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:                         VkExtent3D = 0x7ffd652a1b1c:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 34 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb1cbfe0
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 0x5cacdb1ce720

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1a50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1a60:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 0
        pNext:                          VkFormatProperties3 = 0x7ffd652a1a70:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 8590054401 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 8590056961 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 0

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    image:                          VkImage = 0x5cacdb1ce720
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacd96bbc38:
        size:                           VkDeviceSize = 8847360
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    image:                          VkImage = 0x5cacdb1ce720
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a1b90:
        size:                           VkDeviceSize = 8847360
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a1bd0:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a1bd4
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a1bd4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a1bdc:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a1be4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a1bec:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a1bf4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a1cd8
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a1cd8:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a1ce8:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a1cf8:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a19a0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8847360
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacd94743a0

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    image:                          VkImage = 0x5cacdb1ce720
    memory:                         VkDeviceMemory = 0x5cacd94743a0
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1810:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1820:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 0
        pNext:                          VkFormatProperties3 = 0x7ffd652a1900:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 8590054401 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 8590056961 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd652a1b70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0x5cacdb1ce720
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:                     VkComponentMapping = 0x7ffd652a1b98:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd652a1ba8:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0x5cacd948f430

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1a60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1a70:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 0
        pNext:                          VkFormatProperties3 = 0x7ffd652a1a80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 8590054401 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 8590056961 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 0

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaeba990
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a1cc0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdaeba990
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x5cacdb1d5128
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x5cacdb1d5128:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x5cacdb1ce720
            subresourceRange:               VkImageSubresourceRange = 0x5cacdb1d5158:
                aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaeba990

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaebee60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a1e30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdaebee60
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x5cacdb1d5128
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x5cacdb1d5128:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x5cacdb1ce720
            subresourceRange:               VkImageSubresourceRange = 0x5cacdb1d5158:
                aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaebee60

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0x5cacdb1cf620
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0x5cacdb1cf620:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0x5cacdb1cf628:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1720:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1730:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 0
        pNext:                          VkFormatProperties3 = 0x7ffd652a1740:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 8590054401 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 8590056961 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a1720:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a1730:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a1740:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkRenderPassCreateInfo* = 0x7ffd652a21f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkAttachmentDescription* = 0x5cacdb1e6010
            pAttachments[0]:                const VkAttachmentDescription = 0x5cacdb1e6010:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            pAttachments[1]:                const VkAttachmentDescription = 0x5cacdb1e6034:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 0x7ffd652a2230
            pSubpasses[0]:                  const VkSubpassDescription = 0x7ffd652a2230:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 0x7ffd652a2140
                    pColorAttachments[0]:           const VkAttachmentReference = 0x7ffd652a2140:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = NULL
                pDepthStencilAttachment:        const VkAttachmentReference* = 0x7ffd652a2148:
                    attachment:                     uint32_t = 1
                    layout:                         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 1
        pDependencies:                  const VkSubpassDependency* = 0x7ffd652a2170
            pDependencies[0]:               const VkSubpassDependency = 0x7ffd652a2170:
                srcSubpass:                     uint32_t = 4294967295
                dstSubpass:                     uint32_t = 0
                srcStageMask:                   VkPipelineStageFlags = 1280 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                dstStageMask:                   VkPipelineStageFlags = 1280 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
                dstAccessMask:                  VkAccessFlags = 1280 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
                dependencyFlags:                VkDependencyFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 0x5cacd93a82d0

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd652a2160:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0x7ffd652a2168:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        minImageExtent:                 VkExtent2D = 0x7ffd652a2170:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageExtent:                 VkExtent2D = 0x7ffd652a2178:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd652a2160:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0x7ffd652a2168:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        minImageExtent:                 VkExtent2D = 0x7ffd652a2170:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageExtent:                 VkExtent2D = 0x7ffd652a2178:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkFramebufferCreateInfo* = 0x7ffd652a1fd0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 0x5cacd93a82d0
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkImageView* = 0x5cacdb1e7390
            pAttachments[0]:                const VkImageView = 0x5cacd95cecf0
            pAttachments[1]:                const VkImageView = 0x5cacd948f430
        width:                          uint32_t = 1920
        height:                         uint32_t = 1080
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 0x5cacdb1e7540

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd652a2160:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0x7ffd652a2168:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        minImageExtent:                 VkExtent2D = 0x7ffd652a2170:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageExtent:                 VkExtent2D = 0x7ffd652a2178:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    surface:                        VkSurfaceKHR = 0x5cacd9391010
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd652a2160:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0x7ffd652a2168:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        minImageExtent:                 VkExtent2D = 0x7ffd652a2170:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageExtent:                 VkExtent2D = 0x7ffd652a2178:
            width:                          uint32_t = 1920
            height:                         uint32_t = 1080
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkFramebufferCreateInfo* = 0x7ffd652a1fd0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 0x5cacd93a82d0
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkImageView* = 0x5cacdb1e7630
            pAttachments[0]:                const VkImageView = 0x5cacd9473b20
            pAttachments[1]:                const VkImageView = 0x5cacd948f430
        width:                          uint32_t = 1920
        height:                         uint32_t = 1080
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 0x5cacdb1e7fb0

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0x7ffd652a1580:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 1672
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 0x5cacdb202640

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0x7ffd652a1580:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 628
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 0x5cacdb1f79f0

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0x7ffd652a1580:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 2424
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 0x5cacdb204750

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0x7ffd652a1580:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 628
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 0x5cacdb20eeb0

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0x7ffd652a19c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 2
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0x5cacdb1f6108
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0x5cacdb1f6108:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 0x5cacdb1f6120:
                binding:                        uint32_t = 1
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 0x5cacdb2020a0

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0x7ffd652a19c0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 2
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0x5cacdb1eb8b8
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0x5cacdb1eb8b8:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 0x5cacdb1eb8d0:
                binding:                        uint32_t = 1
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 0x5cacdb207890

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 0x7ffd652a1c50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 0
        maxSets:                        uint32_t = 2
        poolSizeCount:                  uint32_t = 2
        pPoolSizes:                     const VkDescriptorPoolSize* = 0x5cacdb20e040
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 0x5cacdb20e040:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount:                uint32_t = 2
            pPoolSizes[1]:                  const VkDescriptorPoolSize = 0x5cacdb20e048:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = 0x5cacdb1fea40

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0x5cacdb20bcd0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = 0x5cacdb1fea40
        descriptorSetCount:             uint32_t = 2
        pSetLayouts:                    const VkDescriptorSetLayout* = 0x5cacdb20d520
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 0x5cacdb2020a0
            pSetLayouts[1]:                 const VkDescriptorSetLayout = 0x5cacdb207890
    pDescriptorSets:                VkDescriptorSet* = 0x5cacdb202c20
        pDescriptorSets[0]:             VkDescriptorSet = 0x5cacdb1fc9a0
        pDescriptorSets[1]:             VkDescriptorSet = 0x5cacdb1fcd10

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 0x7ffd652a15f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 2
        pSetLayouts:                    const VkDescriptorSetLayout* = 0x5cacdb208060
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 0x5cacdb2020a0
            pSetLayouts[1]:                 const VkDescriptorSetLayout = 0x5cacdb207890
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 0x5cacdb1f0010

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 0
        bufferFeatures:                 VkFormatFeatureFlags = 536870984 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 0
        bufferFeatures:                 VkFormatFeatureFlags = 536870984 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a11a0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a11b0:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a11c0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pipelineCache:                  VkPipelineCache = 0
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 0x5cacdb1fa7e8
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 0x5cacdb1fa7e8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 0x5cacdb299518
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 0x5cacdb299518:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:                         VkShaderModule = 0x5cacdb204750
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 0x5cacdb299548:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:                         VkShaderModule = 0x5cacdb20eeb0
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 0x5cacdb2670f0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 2
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 0x5cacdb1feba0
                    pVertexBindingDescriptions[0]:  const VkVertexInputBindingDescription = 0x5cacdb1feba0:
                        binding:                        uint32_t = 0
                        stride:                         uint32_t = 32
                        inputRate:                      VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                    pVertexBindingDescriptions[1]:  const VkVertexInputBindingDescription = 0x5cacdb1febac:
                        binding:                        uint32_t = 1
                        stride:                         uint32_t = 64
                        inputRate:                      VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 7
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 0x5cacdb299490
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 0x5cacdb299490:
                        location:                       uint32_t = 0
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                         uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 0x5cacdb2994a0:
                        location:                       uint32_t = 1
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                         uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 0x5cacdb2994b0:
                        location:                       uint32_t = 2
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                         uint32_t = 20
                    pVertexAttributeDescriptions[3]: const VkVertexInputAttributeDescription = 0x5cacdb2994c0:
                        location:                       uint32_t = 3
                        binding:                        uint32_t = 1
                        format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
                        offset:                         uint32_t = 0
                    pVertexAttributeDescriptions[4]: const VkVertexInputAttributeDescription = 0x5cacdb2994d0:
                        location:                       uint32_t = 4
                        binding:                        uint32_t = 1
                        format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
                        offset:                         uint32_t = 16
                    pVertexAttributeDescriptions[5]: const VkVertexInputAttributeDescription = 0x5cacdb2994e0:
                        location:                       uint32_t = 5
                        binding:                        uint32_t = 1
                        format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
                        offset:                         uint32_t = 32
                    pVertexAttributeDescriptions[6]: const VkVertexInputAttributeDescription = 0x5cacdb2994f0:
                        location:                       uint32_t = 6
                        binding:                        uint32_t = 1
                        format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
                        offset:                         uint32_t = 48
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 0x5cacdb2abfa0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 0x5cacdb27c1c0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = UNUSED
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = UNUSED
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 0x5cacdb27c330:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 1 (VK_CULL_MODE_FRONT_BIT)
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 0x5cacdb2889f0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 0
                pSampleMask:                    const VkSampleMask* = NULL
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 0x5cacdb243450:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:                VkBool32 = 1
                depthWriteEnable:               VkBool32 = 1
                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_LESS (1)
                depthBoundsTestEnable:          VkBool32 = 0
                stencilTestEnable:              VkBool32 = 0
                front:                          VkStencilOpState = 0x5cacdb243478:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                back:                           VkStencilOpState = 0x5cacdb243494:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                minDepthBounds:                 float = 0
                maxDepthBounds:                 float = 0
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 0x5cacdb228010:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_CLEAR (0)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 0x5cacdb299600
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 0x5cacdb299600:
                        blendEnable:                    VkBool32 = 0
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 0x5cacdb228038
                    blendConstants[0]:              float = 0
                    blendConstants[1]:              float = 0
                    blendConstants[2]:              float = 0
                    blendConstants[3]:              float = 0
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 0x5cacdb299460:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:              uint32_t = 2
                pDynamicStates:                 const VkDynamicState* = 0x5cacdb2ad570
                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
            layout:                         VkPipelineLayout = 0x5cacdb1f0010
            renderPass:                     VkRenderPass = 0x5cacd93a82d0
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 0x7ffd652a1bf0
        pPipelines[0]:                  VkPipeline = 0x5cacdb20f060

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 0x7ffd652a15f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 2
        pSetLayouts:                    const VkDescriptorSetLayout* = 0x5cacdb29dff0
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 0x5cacdb2020a0
            pSetLayouts[1]:                 const VkDescriptorSetLayout = 0x5cacdb207890
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 0x5cacdb2b8bb0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
    pFormatProperties:              VkFormatProperties* = 0x7ffd652a1144:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 0
        bufferFeatures:                 VkFormatFeatureFlags = 536870984 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a11a0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a11b0:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a11c0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pipelineCache:                  VkPipelineCache = 0
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 0x5cacdb24abb8
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 0x5cacdb24abb8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 0x5cacdb21bcc8
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 0x5cacdb21bcc8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:                         VkShaderModule = 0x5cacdb202640
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 0x5cacdb21bcf8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:                         VkShaderModule = 0x5cacdb1f79f0
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 0x5cacdb207df0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 1
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 0x5cacdb21fe10
                    pVertexBindingDescriptions[0]:  const VkVertexInputBindingDescription = 0x5cacdb21fe10:
                        binding:                        uint32_t = 0
                        stride:                         uint32_t = 20
                        inputRate:                      VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 2
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 0x5cacdb20c7c0
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 0x5cacdb20c7c0:
                        location:                       uint32_t = 0
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                         uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 0x5cacdb20c7d0:
                        location:                       uint32_t = 1
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                         uint32_t = 8
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 0x5cacdb24ac50:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 0x5cacdb27c330:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = UNUSED
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = UNUSED
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 0x5cacdb238690:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 1 (VK_CULL_MODE_FRONT_BIT)
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 0x5cacdb27c1c0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 0
                pSampleMask:                    const VkSampleMask* = NULL
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 0x5cacdb2b2bd0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:                VkBool32 = 1
                depthWriteEnable:               VkBool32 = 1
                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_LESS (1)
                depthBoundsTestEnable:          VkBool32 = 0
                stencilTestEnable:              VkBool32 = 0
                front:                          VkStencilOpState = 0x5cacdb2b2bf8:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                back:                           VkStencilOpState = 0x5cacdb2b2c14:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                minDepthBounds:                 float = 0
                maxDepthBounds:                 float = 0
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 0x5cacdb228da0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_CLEAR (0)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 0x5cacdb250ad0
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 0x5cacdb250ad0:
                        blendEnable:                    VkBool32 = 0
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 0x5cacdb228dc8
                    blendConstants[0]:              float = 0
                    blendConstants[1]:              float = 0
                    blendConstants[2]:              float = 0
                    blendConstants[3]:              float = 0
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 0x5cacdb23fe60:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:              uint32_t = 2
                pDynamicStates:                 const VkDynamicState* = 0x5cacdb228de0
                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
            layout:                         VkPipelineLayout = 0x5cacdb2b8bb0
            renderPass:                     VkRenderPass = 0x5cacd93a82d0
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 0x7ffd652a1bf0
        pPipelines[0]:                  VkPipeline = 0x5cacdb2ac280

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a1af0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 18 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb28afe0
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb2ad1e0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2ad1e0
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacdb2b2618:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 64
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2ad1e0
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a1bf0:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 64
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a1c30:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a1c34
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a1c34:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a1c3c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a1c44:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a1c4c:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a1c54:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a1d38
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a1d38:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a1d48:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a1d58:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a19f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 128
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacd9460980

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2ad1e0
    memory:                         VkDeviceMemory = 0x5cacd9460980
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a1af0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb295aa0
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb231420

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb231420
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacdb223eb8:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb231420
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a1bf0:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a1c30:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a1c34
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a1c34:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a1c3c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a1c44:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a1c4c:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a1c54:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a1d38
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a1d38:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a1d48:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a1d58:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a19f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 128
        memoryTypeIndex:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdb227ab0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb231420
    memory:                         VkDeviceMemory = 0x5cacdb227ab0
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb227ab0
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 128
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7d79bbc18000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb227ab0

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdacdd570
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a1d70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdacdd570
    srcBuffer:                      VkBuffer = 0x5cacdb231420
    dstBuffer:                      VkBuffer = 0x5cacdb2ad1e0
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 0x7ffd652a1de0
        pRegions[0]:                    const VkBufferCopy = 0x7ffd652a1de0:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 128

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdacdd570

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a1e20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb23b200

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    semaphore:                      VkSemaphore = 0x5cacdb23b200
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a1af0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 18 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb23fe10
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb2283f0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2283f0
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacd9390ab8:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 64
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2283f0
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a1bf0:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 64
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a1c30:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a1c34
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a1c34:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a1c3c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a1c44:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a1c4c:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a1c54:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a1d38
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a1d38:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a1d48:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a1d58:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a19f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 128
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacd9473610

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2283f0
    memory:                         VkDeviceMemory = 0x5cacd9473610
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a1af0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb239150
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb2263e0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2263e0
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacd946f498:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2263e0
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a1bf0:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a1c30:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a1c34
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a1c34:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a1c3c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a1c44:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a1c4c:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a1c54:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a1d38
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a1d38:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a1d48:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a1d58:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a19f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 128
        memoryTypeIndex:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacd9317d90

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb2263e0
    memory:                         VkDeviceMemory = 0x5cacd9317d90
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacd9317d90
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 128
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7d79bbc17000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacd9317d90

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdace09e0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a1d70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdace09e0
    srcBuffer:                      VkBuffer = 0x5cacdb2263e0
    dstBuffer:                      VkBuffer = 0x5cacdb2283f0
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 0x7ffd652a1de0
        pRegions[0]:                    const VkBufferCopy = 0x7ffd652a1de0:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 128

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdace09e0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a1e20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb23b200

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    semaphore:                      VkSemaphore = 0x5cacdb23b200
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd652a22d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x5cacdb240ba0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd652a22d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x5cacdb2231c0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd652a22d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x5cacdb21bd80

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd652a22d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x5cacdb213c90

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a22d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb23b200

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a22d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb2abed0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a22d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb229c80

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a22d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb229a00

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2270:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb228cd0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a2270:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb2b0080

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x5cacdaa288e0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x5cacdb1e7338
        pSubmits[0]:                    const VkSubmitInfo = 0x5cacdb1e7338:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 2
            pCommandBuffers:                const VkCommandBuffer* = 0x5cacdb2b23b0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x5cacdaeba990
                pCommandBuffers[1]:             const VkCommandBuffer = 0x5cacdaebee60
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0x5cacdb061ed0

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd652a1f70
        pFences[0]:                     const VkFence = 0x5cacdb061ed0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd652a1f80
        pFences[0]:                     const VkFence = 0x5cacdb061ed0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 0x7ffd652a0a60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = NULL
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 6 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        flags:                          VkImageCreateFlags = 0
    pImageFormatProperties:         VkImageFormatProperties2* = 0x7ffd652a0ac0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = NULL
        imageFormatProperties:          VkImageFormatProperties = 0x7ffd652a0ad0:
            maxExtent:                      VkExtent3D = 0x7ffd652a0ad0:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a07a0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a07b0:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a0890:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkImageCreateInfo* = 0x7ffd652a0c70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        extent:                         VkExtent3D = 0x7ffd652a0c8c:
            width:                          uint32_t = 1024
            height:                         uint32_t = 1024
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 6 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb1eb3f0
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 0x5cacdb2a1860

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a0bc0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a0bd0:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a0be0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    image:                          VkImage = 0x5cacdb2a1860
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacd96c5bd8:
        size:                           VkDeviceSize = 4194304
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    image:                          VkImage = 0x5cacdb2a1860
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a0d00:
        size:                           VkDeviceSize = 4194304
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a0d40:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a0d44
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a0d44:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a0d4c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a0d54:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a0d5c:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a0d64:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a0e48
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a0e48:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a0e58:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a0e68:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a0b10:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 4194304
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdb2a2040

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    image:                          VkImage = 0x5cacdb2a1860
    memory:                         VkDeviceMemory = 0x5cacdb2a2040
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a0980:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a0990:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a0a70:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd652a0ce0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0x5cacdb2a1860
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        components:                     VkComponentMapping = 0x7ffd652a0d08:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd652a0d18:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0x5cacdb23b6b0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties:              VkFormatProperties2* = 0x7ffd652a0bd0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 0x7ffd652a0be0:
            linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 0x7ffd652a0bf0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 274878026753 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 122241 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 8 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaec30c0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a0e30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdaec30c0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x5cacdb293da8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x5cacdb293da8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x5cacdb2a1860
            subresourceRange:               VkImageSubresourceRange = 0x5cacdb293dd8:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaec30c0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a0f30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb2ad360

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a0ba0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 4194304
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb222f10
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb227580

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb227580
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacd93cd158:
        size:                           VkDeviceSize = 4194304
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb227580
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a0ca0:
        size:                           VkDeviceSize = 4194304
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a0ce0:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a0ce4
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a0ce4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a0cec:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a0cf4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a0cfc:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a0d04:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a0de8
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a0de8:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a0df8:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a0e08:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a0aa0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 4194304
        memoryTypeIndex:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdb2926b0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb227580
    memory:                         VkDeviceMemory = 0x5cacdb2926b0
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb2926b0
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 4194304
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7d79b9000000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb2926b0

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaec7310
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a0e40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdaec7310
    srcBuffer:                      VkBuffer = 0x5cacdb227580
    dstImage:                       VkImage = 0x5cacdb2a1860
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 0x7ffd652a0f10
        pRegions[0]:                    const VkBufferImageCopy = 0x7ffd652a0f10:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 0
            bufferImageHeight:              uint32_t = 0
            imageSubresource:               VkImageSubresourceLayers = 0x7ffd652a0f20:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 0x7ffd652a0f30:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 0x7ffd652a0f3c:
                width:                          uint32_t = 1024
                height:                         uint32_t = 1024
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaec7310

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaecb5a0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a0fa0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdaecb5a0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x5cacdadd5be8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x5cacdadd5be8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x5cacdb2a1860
            subresourceRange:               VkImageSubresourceRange = 0x5cacdadd5c18:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdaecb5a0

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSamplerCreateInfo* = 0x7ffd652a0ca0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:                          const void* = NULL
        flags:                          VkSamplerCreateFlags = 0
        magFilter:                      VkFilter = VK_FILTER_LINEAR (1)
        minFilter:                      VkFilter = VK_FILTER_LINEAR (1)
        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR (1)
        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        mipLodBias:                     float = 0
        anisotropyEnable:               VkBool32 = 0
        maxAnisotropy:                  float = 2
        compareEnable:                  VkBool32 = 0
        compareOp:                      VkCompareOp = VK_COMPARE_OP_ALWAYS (7)
        minLod:                         float = 0
        maxLod:                         float = 0
        borderColor:                    VkBorderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK (3)
        unnormalizedCoordinates:        VkBool32 = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSampler:                       VkSampler* = 0x5cacdb1ffb00

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd652a0e40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x5cacdac62ed0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0x7ffd652a1118
        pCommandBuffers[0]:             VkCommandBuffer = 0x5cacdb2f92b0

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdb2f92b0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a1130:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdb2f92b0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x5cacdadd5be8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x5cacdadd5be8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x5cacdb2a1860
            subresourceRange:               VkImageSubresourceRange = 0x5cacdadd5c18:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdb2f92b0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a0d70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 884736
        usage:                          VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb1eb3b0
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb22b5a0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb22b5a0
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacdadd57c8:
        size:                           VkDeviceSize = 884736
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb22b5a0
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a0e70:
        size:                           VkDeviceSize = 884736
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a0eb0:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a0eb4
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a0eb4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a0ebc:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a0ec4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a0ecc:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a0ed4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a0fb8
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a0fb8:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a0fc8:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a0fd8:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a0c70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 884736
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdadd5910

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb22b5a0
    memory:                         VkDeviceMemory = 0x5cacdadd5910
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a0d70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 884736
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdadd0cd0
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdadd0d40

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdadd0d40
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacdb2fad68:
        size:                           VkDeviceSize = 884736
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdadd0d40
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a0e70:
        size:                           VkDeviceSize = 884736
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a0eb0:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a0eb4
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a0eb4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a0ebc:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a0ec4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a0ecc:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a0ed4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a0fb8
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a0fb8:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a0fc8:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a0fd8:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a0c70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 884736
        memoryTypeIndex:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdb251530

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdadd0d40
    memory:                         VkDeviceMemory = 0x5cacdb251530
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb251530
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 884736
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7d79baca3000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb251530

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdace4670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a0ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdace4670
    srcBuffer:                      VkBuffer = 0x5cacdadd0d40
    dstBuffer:                      VkBuffer = 0x5cacdb22b5a0
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 0x7ffd652a1060
        pRegions[0]:                    const VkBufferCopy = 0x7ffd652a1060:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 884736

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdace4670

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a10a0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb20e0f0

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    semaphore:                      VkSemaphore = 0x5cacdb20e0f0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a0d70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 884736
        usage:                          VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb3a70b0
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb4e7e60

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4e7e60
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacdb4e83a8:
        size:                           VkDeviceSize = 884736
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4e7e60
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a0e70:
        size:                           VkDeviceSize = 884736
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a0eb0:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a0eb4
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a0eb4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a0ebc:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a0ec4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a0ecc:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a0ed4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a0fb8
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a0fb8:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a0fc8:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a0fd8:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a0c70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 884736
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdb4e84f0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4e7e60
    memory:                         VkDeviceMemory = 0x5cacdb4e84f0
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a0d70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 884736
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb3a7200
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb4eadc0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4eadc0
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacdb4eb3e8:
        size:                           VkDeviceSize = 884736
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4eadc0
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a0e70:
        size:                           VkDeviceSize = 884736
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a0eb0:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a0eb4
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a0eb4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a0ebc:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a0ec4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a0ecc:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a0ed4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a0fb8
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a0fb8:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a0fc8:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a0fd8:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a0c70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 884736
        memoryTypeIndex:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdb4eb530

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4eadc0
    memory:                         VkDeviceMemory = 0x5cacdb4eb530
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb4eb530
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 884736
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7d79b9d28000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb4eb530

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdace8d70
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a0ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdace8d70
    srcBuffer:                      VkBuffer = 0x5cacdb4eadc0
    dstBuffer:                      VkBuffer = 0x5cacdb4e7e60
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 0x7ffd652a1060
        pRegions[0]:                    const VkBufferCopy = 0x7ffd652a1060:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 884736

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdace8d70

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a10a0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb20e0f0

Thread 0, Frame 0:
vkFreeMemory(device, memory, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdadd5910
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb22b5a0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdadd0d40
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkFreeMemory(device, memory, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb251530
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    semaphore:                      VkSemaphore = 0x5cacdb20e0f0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a0d70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 110592
        usage:                          VkBufferUsageFlags = 66 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb4ec850
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdb4ed2f0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4ed2f0
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacdb2fad68:
        size:                           VkDeviceSize = 110592
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4ed2f0
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a0e70:
        size:                           VkDeviceSize = 110592
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a0eb0:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a0eb4
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a0eb4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a0ebc:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a0ec4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a0ecc:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a0ed4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a0fb8
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a0fb8:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a0fc8:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a0fd8:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a0c70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 110592
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdb251530

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb4ed2f0
    memory:                         VkDeviceMemory = 0x5cacdb251530
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd652a0d70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 110592
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_CONCURRENT (1)
        queueFamilyIndexCount:          uint32_t = 2
        pQueueFamilyIndices:            const uint32_t* = 0x5cacdb3a71e0
            pQueueFamilyIndices[0]:         const uint32_t = 0
            pQueueFamilyIndices[1]:         const uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x5cacdadd0d40

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdadd0d40
    pMemoryRequirements:            VkMemoryRequirements* = 0x5cacdadd57c8:
        size:                           VkDeviceSize = 110592
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdadd0d40
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd652a0e70:
        size:                           VkDeviceSize = 110592
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 31

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x5cacd96f2530
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd652a0eb0:
        memoryTypeCount:                uint32_t = 5
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd652a0eb4
            memoryTypes[0]:                 VkMemoryType = 0x7ffd652a0eb4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0x7ffd652a0ebc:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0x7ffd652a0ec4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd652a0ecc:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0x7ffd652a0ed4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd652a0fb8
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd652a0fb8:
                size:                           VkDeviceSize = 10737418240
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd652a0fc8:
                size:                           VkDeviceSize = 12426832896
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd652a0fd8:
                size:                           VkDeviceSize = 257949696
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd652a0c70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 110592
        memoryTypeIndex:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x5cacdadd5910

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdadd0d40
    memory:                         VkDeviceMemory = 0x5cacdadd5910
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdadd5910
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 110592
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7d79bad60000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdadd5910

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdacf1bd0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd652a0ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0x5cacdacf1bd0
    srcBuffer:                      VkBuffer = 0x5cacdadd0d40
    dstBuffer:                      VkBuffer = 0x5cacdb4ed2f0
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 0x7ffd652a1060
        pRegions[0]:                    const VkBufferCopy = 0x7ffd652a1060:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 110592

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x5cacdacf1bd0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd652a10a0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x5cacdb20e0f0

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    semaphore:                      VkSemaphore = 0x5cacdb20e0f0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd652a2080
        pFences[0]:                     const VkFence = 0x5cacdb240ba0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    fenceCount:                     uint32_t = 2
    pFences:                        const VkFence* = 0x7ffd652a2090
        pFences[0]:                     const VkFence = 0x5cacdb240ba0
        pFences[1]:                     const VkFence = 0x5cacdb2231c0

Thread 0, Frame 0:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    swapchain:                      VkSwapchainKHR = 0x5cacdb08d280
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 0x5cacdb229a00
    fence:                          VkFence = 0
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 0x5cacd9727970
    descriptorWriteCount:           uint32_t = 2
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0x5cacdb28b2b8
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0x5cacdb28b2b8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 0x5cacdb1fcd10
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 0x5cacdb3a8060
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 0x5cacdb3a8060:
                    buffer:                         VkBuffer = 0x5cacdb2ad1e0
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 128
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 0x5cacdb28b2f8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 0x5cacdb1fcd10
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 0x5cacdb20a920
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 0x5cacdb20a920:
                    buffer:                         VkBuffer = 0x5cacdb2283f0
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 128
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 0x5cacd9727970
    descriptorWriteCount:           uint32_t = 1
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0x5cacdb27c1c8
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0x5cacdb27c1c8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 0x5cacdb1fcd10
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
            pImageInfo:                     const VkDescriptorImageInfo* = 0x5cacdb4ec9a0
                pImageInfo[0]:                  const VkDescriptorImageInfo = 0x5cacdb4ec9a0:
                    sampler:                        VkSampler = 0x5cacdb1ffb00
                    imageView:                      VkImageView = 0x5cacdb23b6b0
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x5cacdaa288e0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x5cacdb2516a8
        pSubmits[0]:                    const VkSubmitInfo = 0x5cacdb2516a8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 6
            pCommandBuffers:                const VkCommandBuffer* = 0x5cacdb22a8a0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x5cacdaeba990
                pCommandBuffers[1]:             const VkCommandBuffer = 0x5cacdaebee60
                pCommandBuffers[2]:             const VkCommandBuffer = 0x5cacdaec30c0
                pCommandBuffers[3]:             const VkCommandBuffer = 0x5cacdaec7310
                pCommandBuffers[4]:             const VkCommandBuffer = 0x5cacdaecb5a0
                pCommandBuffers[5]:             const VkCommandBuffer = 0x5cacdb2f92b0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0x5cacdb061ed0

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd652a1f70
        pFences[0]:                     const VkFence = 0x5cacdb061ed0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x5cacd9727970
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd652a1f80
        pFences[0]:                     const VkFence = 0x5cacdb061ed0

Thread 0, Frame 0:
vkFreeMemory(device, memory, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    memory:                         VkDeviceMemory = 0x5cacdb2926b0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    buffer:                         VkBuffer = 0x5cacdb227580
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0x5cacd9727970
    semaphore:                      VkSemaphore = 0x5cacdb2ad360
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 1, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x5cacdaa288e0
    submitCount:                    uint32_t = 5
    pSubmits:                       const VkSubmitInfo* = 0x7d799c001248
        pSubmits[0]:                    const VkSubmitInfo = 0x7d799c001248:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7d799c0013c0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x5cacdacdd570
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0x7d799c0013e0
                pSignalSemaphores[0]:           const VkSemaphore = 0x5cacd93a7540
        pSubmits[1]:                    const VkSubmitInfo = 0x7d799c001290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7d799c001400
                pCommandBuffers[0]:             const VkCommandBuffer = 0x5cacdace09e0
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0x7d799c001420
                pSignalSemaphores[0]:           const VkSemaphore = 0x5cacd93d0370
        pSubmits[2]:                    const VkSubmitInfo = 0x7d799c0012d8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7d799c001440
                pCommandBuffers[0]:             const VkCommandBuffer = 0x5cacdace4670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0x7d799c001460
                pSignalSemaphores[0]:           const VkSemaphore = 0x5cacdace85b0
        pSubmits[3]:                    const VkSubmitInfo = 0x7d799c001320:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7d799c001480
                pCommandBuffers[0]:             const VkCommandBuffer = 0x5cacdace8d70
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0x7d799c0014a0
                pSignalSemaphores[0]:           const VkSemaphore = 0x5cacdaceccf0
        pSubmits[4]:                    const VkSubmitInfo = 0x7d799c001368:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7d799c0014c0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x5cacdacf1bd0
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0x7d799c0014e0
                pSignalSemaphores[0]:           const VkSemaphore = 0x5cacdacf5fb0
    fence:                          VkFence = 0x5cacdaeb9da0

Thread 1, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_ERROR_DEVICE_LOST (-4):
    device:                         VkDevice = 0x5cacd9727970
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7d79afdff9a0
        pFences[0]:                     const VkFence = 0x5cacdaeb9da0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

